# Multi-stage Dockerfile for magents agent containers
# Build args control which variant is built
ARG BUILD_TARGET=production

###########################################
# Base stage - Common for all variants
###########################################
FROM node:20-slim AS base

# Install essential system packages for both variants
RUN apt-get update && apt-get install -y \
    git \
    tmux \
    curl \
    python3 \
    python3-pip \
    make \
    g++ \
    build-essential \
    sudo \
    netcat-openbsd \
    jq \
    coreutils \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -g 1001 magents && \
    useradd -u 1001 -g magents -m -s /bin/bash magents && \
    echo 'magents ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set up working directory
WORKDIR /workspace

# Install global npm packages
RUN npm install -g npm@latest pnpm task-master-ai

# Switch to non-root user
USER magents

# Create necessary directories with proper permissions
RUN mkdir -p /home/magents/.config /home/magents/.cache /home/magents/.npm

###########################################
# Development stage - Additional debug tools
###########################################
FROM base AS development

# Switch back to root to install dev tools
USER root

# Install development and debugging tools
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    strace \
    tcpdump \
    net-tools \
    dnsutils \
    iputils-ping \
    telnet \
    lsof \
    psmisc \
    gdb \
    valgrind \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js debugging tools
RUN npm install -g node-inspector nodemon

# Enable Node.js debugging
ENV NODE_OPTIONS="--inspect=0.0.0.0:9229"

# Switch back to magents user
USER magents

# Development-specific environment
ENV NODE_ENV=development
ENV DEBUG=true

###########################################
# Production stage - Minimal and secure
###########################################
FROM base AS production

# Production environment
ENV NODE_ENV=production

# Remove build dependencies to reduce image size
USER root
RUN apt-get purge -y --auto-remove \
    make \
    g++ \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

USER magents

###########################################
# Final stage - Common configuration
###########################################
FROM ${BUILD_TARGET} AS final

# Set common environment variables
ENV WORKSPACE_DIR=/workspace
ENV SHARED_DIR=/shared
ENV AGENT_DIR=/agent
ENV USER=magents

# Create volume mount points
VOLUME ["/workspace", "/shared", "/agent"]

# Copy scripts
USER root
COPY --chown=magents:magents docker-entrypoint.sh /usr/local/bin/
COPY --chown=magents:magents claude-wrapper.sh /usr/local/bin/claude
COPY --chown=magents:magents init-volumes.sh /usr/local/bin/
COPY --chown=magents:magents health-server.js /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh /usr/local/bin/claude /usr/local/bin/init-volumes.sh /usr/local/bin/health-server.js

USER magents

# Expose ports
EXPOSE 3999
# Also expose debugger port in development
EXPOSE 9229

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3999/health || exit 1

# Labels for image metadata
LABEL org.opencontainers.image.title="Magents Agent"
LABEL org.opencontainers.image.description="AI agent runtime with Claude Code and Task Master integration"
LABEL org.opencontainers.image.vendor="Magents"
LABEL org.opencontainers.image.version="1.0.0"

# Default command
CMD ["/usr/local/bin/docker-entrypoint.sh"]