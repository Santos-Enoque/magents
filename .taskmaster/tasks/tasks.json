{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Monorepo Structure with npm Workspaces",
        "description": "Transform current single-package project into workspace-based monorepo with packages/cli, packages/shared, packages/backend, packages/web",
        "details": "Create root package.json with workspaces configuration. Setup directory structure: packages/cli (move existing src/), packages/shared (types and utilities), packages/backend (Express server), packages/web (React app). Update root package.json with workspace dependencies and scripts. Configure TypeScript project references in root tsconfig.json for cross-package compilation.",
        "testStrategy": "Verify workspace structure created correctly, npm install works from root, TypeScript compilation works across packages, existing CLI functionality preserved",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create root workspace configuration and directory structure",
            "description": "Set up the basic monorepo structure with npm workspaces configuration and create all necessary package directories",
            "dependencies": [],
            "details": "Create root package.json with workspaces field pointing to packages/*. Create packages/ directory with subdirectories: cli, shared, backend, web. Initialize each package directory with basic package.json files containing name, version, and appropriate dependencies.",
            "status": "done",
            "testStrategy": "Verify workspace structure with 'npm ls --workspaces' and ensure all packages are recognized"
          },
          {
            "id": 2,
            "title": "Move existing CLI code to packages/cli",
            "description": "Migrate current src/ directory and related files to packages/cli workspace",
            "dependencies": [
              1
            ],
            "details": "Move existing src/ directory to packages/cli/src/. Update packages/cli/package.json with proper dependencies, bin entry, and scripts. Update import paths if necessary. Move CLI-specific configuration files like tsconfig.json to packages/cli/.",
            "status": "done",
            "testStrategy": "Test CLI functionality by running commands from packages/cli to ensure migration was successful"
          },
          {
            "id": 3,
            "title": "Setup packages/shared for common types and utilities",
            "description": "Create shared package with TypeScript types and utility functions used across other packages",
            "dependencies": [
              1
            ],
            "details": "Create packages/shared/src/ with index.ts export file. Move common types, interfaces, and utility functions from CLI to shared package. Set up package.json with TypeScript compilation scripts. Configure as a TypeScript library with proper exports.",
            "status": "done",
            "testStrategy": "Verify shared package builds correctly and exports are accessible from other packages"
          },
          {
            "id": 4,
            "title": "Initialize packages/backend and packages/web scaffolding",
            "description": "Create basic Express backend and React web application scaffolds in their respective packages",
            "dependencies": [
              1,
              3
            ],
            "details": "Set up packages/backend with Express server boilerplate, basic routing, and dependency on packages/shared. Initialize packages/web with React application scaffold using create-react-app or Vite, also depending on packages/shared. Configure package.json files with appropriate scripts and dependencies.",
            "status": "done",
            "testStrategy": "Start both backend and web applications to verify basic functionality and shared package imports"
          },
          {
            "id": 5,
            "title": "Configure TypeScript project references and root scripts",
            "description": "Set up TypeScript project references for cross-package compilation and configure root-level scripts for workspace management",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Create root tsconfig.json with project references to all packages. Update each package's tsconfig.json with appropriate references and composite: true. Add root package.json scripts for building all packages, running tests, and development workflows. Configure workspace dependency management.",
            "status": "done",
            "testStrategy": "Run 'npm run build' from root to verify all packages compile correctly with proper cross-references"
          }
        ]
      },
      {
        "id": 2,
        "title": "Extract Shared Types and Utilities Package",
        "description": "Create packages/shared with all existing types from src/types/index.ts and common utilities",
        "details": "Move Agent, AgentRecord, CreateAgentOptions, and all other types from src/types/index.ts to packages/shared/src/types.ts. Extract common utility functions and constants. Create proper package.json with TypeScript exports. Setup TypeScript declarations and build configuration. Ensure proper module exports for consumption by other packages.",
        "testStrategy": "Verify types are properly exported from shared package, can be imported by other packages, TypeScript compilation works, no circular dependencies",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create packages/shared directory structure and package.json",
            "description": "Initialize the shared package with proper directory structure and TypeScript configuration",
            "dependencies": [],
            "details": "Create packages/shared directory with src/, dist/, and package.json. Configure package.json with proper name (@magents/shared), version, main/types exports, and TypeScript as devDependency. Setup tsconfig.json for compilation and create initial index.ts barrel export file.",
            "status": "done",
            "testStrategy": "Verify package structure matches monorepo conventions and package.json has correct export paths"
          },
          {
            "id": 2,
            "title": "Move all types from src/types/index.ts to packages/shared/src/types.ts",
            "description": "Extract Agent, AgentRecord, CreateAgentOptions and all other type definitions to the shared package",
            "dependencies": [
              1
            ],
            "details": "Copy all type definitions from src/types/index.ts to packages/shared/src/types.ts. Maintain all existing interfaces, types, and enums. Update packages/shared/src/index.ts to re-export all types from types.ts file.",
            "status": "done",
            "testStrategy": "Ensure all types are properly exported and accessible when importing from @magents/shared"
          },
          {
            "id": 3,
            "title": "Extract common utility functions and constants",
            "description": "Identify and move reusable utility functions and constants to the shared package",
            "dependencies": [
              2
            ],
            "details": "Scan codebase for utility functions that could be shared across packages. Create packages/shared/src/utils.ts and packages/shared/src/constants.ts. Move functions like validation helpers, formatting utilities, and shared constants. Update barrel exports in index.ts.",
            "status": "done",
            "testStrategy": "Test that utilities work correctly when imported and maintain same functionality as original locations"
          },
          {
            "id": 4,
            "title": "Setup TypeScript build configuration and declarations",
            "description": "Configure TypeScript compilation to generate proper .d.ts files and build artifacts",
            "dependencies": [
              3
            ],
            "details": "Configure tsconfig.json for declaration generation, set outDir to dist/, include all src files. Add build script to package.json using tsc. Ensure proper module resolution and export maps for both CommonJS and ESM. Generate type declarations in dist/ directory.",
            "status": "done",
            "testStrategy": "Run build process and verify .d.ts files are generated correctly with proper type exports"
          },
          {
            "id": 5,
            "title": "Update main project to use shared package and verify integration",
            "description": "Replace local type imports with shared package imports and ensure everything works correctly",
            "dependencies": [
              4
            ],
            "details": "Update src/types/index.ts to re-export from @magents/shared instead of defining types locally. Update all import statements throughout the codebase to use the shared package. Add @magents/shared as dependency in main package.json. Test that all existing functionality continues to work.",
            "status": "done",
            "testStrategy": "Run existing tests to ensure no regressions, verify TypeScript compilation passes, and check that all imports resolve correctly"
          }
        ]
      },
      {
        "id": 3,
        "title": "Migrate CLI to packages/cli",
        "description": "Move existing CLI code to packages/cli while preserving all functionality and global binary access",
        "details": "Move all src/ code to packages/cli/src/. Update imports to use packages/shared for types. Configure package.json with bin field for magents binary. Update TypeScript configuration for project references. Ensure all existing services (AgentManager, GitService, TmuxService, ConfigManager, UIService) work properly. Update build scripts and ensure global installation works.",
        "testStrategy": "Run all existing CLI commands (create, list, attach, dashboard, monitor, task-create), verify magents binary works globally, all tests pass, functionality identical to original",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create packages/cli directory structure and move source code",
            "description": "Create the new packages/cli directory structure and move all existing src/ code to packages/cli/src/",
            "dependencies": [],
            "details": "Create packages/cli directory with src/, dist/, and tests/ subdirectories. Move all files from src/ to packages/cli/src/. Update any internal relative imports within the CLI code to reflect the new structure.",
            "status": "done",
            "testStrategy": "Verify all files are moved correctly and no files are lost in the migration"
          },
          {
            "id": 2,
            "title": "Update imports to use packages/shared for shared types",
            "description": "Refactor all imports in the CLI code to use packages/shared for shared types and utilities",
            "dependencies": [
              1
            ],
            "details": "Identify all imports that should reference shared types from packages/shared. Update import statements to use relative paths to packages/shared or configure proper module resolution. Ensure types like AgentConfig, GitConfig, etc. are imported from shared package.",
            "status": "done",
            "testStrategy": "Run TypeScript compilation to verify all imports resolve correctly"
          },
          {
            "id": 3,
            "title": "Configure package.json with bin field and dependencies",
            "description": "Create packages/cli/package.json with proper bin field configuration for global magents binary",
            "dependencies": [
              2
            ],
            "details": "Create package.json in packages/cli with bin field pointing to compiled CLI entry point. Configure dependencies including packages/shared. Set up proper npm scripts for build, test, and dev. Ensure the binary name 'magents' is properly configured.",
            "status": "done",
            "testStrategy": "Test local npm link to verify binary is accessible globally"
          },
          {
            "id": 4,
            "title": "Update TypeScript configuration for project references",
            "description": "Configure TypeScript project references and compilation settings for the CLI package",
            "dependencies": [
              3
            ],
            "details": "Create tsconfig.json in packages/cli with proper project references to packages/shared. Update root tsconfig.json to include packages/cli in references. Configure proper output directories and module resolution. Ensure proper build order between packages.",
            "status": "done",
            "testStrategy": "Run tsc --build to verify TypeScript compilation works correctly"
          },
          {
            "id": 5,
            "title": "Update build scripts and verify all services functionality",
            "description": "Update build scripts and thoroughly test that all services (AgentManager, GitService, TmuxService, ConfigManager, UIService) work properly after migration",
            "dependencies": [
              4
            ],
            "details": "Update root package.json build scripts to build CLI package. Test global installation with npm install -g. Verify all core services work: AgentManager can create/manage agents, GitService handles git operations, TmuxService manages tmux sessions, ConfigManager handles configuration, UIService provides proper UI feedback. Test CLI commands end-to-end.",
            "status": "done",
            "testStrategy": "Run full CLI test suite and manual testing of all major commands to ensure no functionality is broken"
          }
        ]
      },
      {
        "id": 4,
        "title": "Setup Backend API Foundation with Express.js",
        "description": "Create packages/backend with Express.js server exposing AgentManager functionality via REST API",
        "details": "Create Express.js server in packages/backend/src/. Import existing services from CLI package. Implement core REST endpoints: GET /api/agents (list agents), POST /api/agents (create agent), DELETE /api/agents/:id (remove agent), GET /api/agents/:id (agent details). Add CORS middleware for web frontend. Setup TypeScript configuration and build process. Add error handling and validation middleware.",
        "testStrategy": "Test all API endpoints with curl/Postman, verify agent creation actually creates tmux sessions and git worktrees, confirm existing AgentManager integration works correctly",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Backend Package Structure and TypeScript Configuration",
            "description": "Create the backend package directory structure and setup TypeScript configuration with proper build tooling",
            "dependencies": [],
            "details": "Create packages/backend/ directory with src/, dist/, and config subdirectories. Setup package.json with Express.js, TypeScript, and build dependencies. Configure tsconfig.json with proper module resolution for importing from CLI package. Setup build scripts and dev server with nodemon for hot reload.",
            "status": "done",
            "testStrategy": "Verify TypeScript compilation works and basic package structure is correct"
          },
          {
            "id": 2,
            "title": "Setup Express.js Server with Middleware Foundation",
            "description": "Initialize Express.js server with essential middleware including CORS, error handling, and request validation",
            "dependencies": [
              1
            ],
            "details": "Create src/server.ts with Express app initialization. Add CORS middleware configured for web frontend. Implement global error handling middleware with proper error response formatting. Add request logging middleware. Setup JSON body parsing and request validation middleware using express-validator.",
            "status": "done",
            "testStrategy": "Test server startup, CORS headers, and error handling with basic requests"
          },
          {
            "id": 3,
            "title": "Import and Adapt CLI Services for API Usage",
            "description": "Import AgentManager and related services from CLI package and adapt them for API server usage",
            "dependencies": [
              2
            ],
            "details": "Import AgentManager, ConfigManager, and other core services from packages/cli/src/. Create service adapters in src/services/ to handle API-specific concerns like async responses and error formatting. Ensure proper dependency injection and service lifecycle management for server environment.",
            "status": "done",
            "testStrategy": "Unit tests for service adapters and integration tests for service imports"
          },
          {
            "id": 4,
            "title": "Implement Core Agent Management REST Endpoints",
            "description": "Create REST API endpoints for agent management operations with proper request/response handling",
            "dependencies": [
              3
            ],
            "details": "Create src/routes/agents.ts with GET /api/agents (list with pagination), POST /api/agents (create with validation), GET /api/agents/:id (details), DELETE /api/agents/:id (remove). Implement request validation schemas for each endpoint. Add proper HTTP status codes and error responses. Include route-level error handling.",
            "status": "done",
            "testStrategy": "API integration tests for each endpoint covering success and error scenarios"
          },
          {
            "id": 5,
            "title": "Setup Build Process and Production Configuration",
            "description": "Configure production build process, environment management, and server deployment preparation",
            "dependencies": [
              4
            ],
            "details": "Setup build scripts in package.json for production compilation. Configure environment variable management for API keys and server configuration. Add start scripts for production and development modes. Setup health check endpoint. Configure proper logging for production environment.",
            "status": "done",
            "testStrategy": "Test production build process and verify server runs correctly in production mode"
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement WebSocket Server for Real-time Updates",
        "description": "Add WebSocket server to backend for real-time agent status updates and monitoring",
        "details": "Integrate Socket.IO or ws library into Express server. Create WebSocket endpoints for agent status events. Hook into existing agent status tracking to emit real-time updates when agents change state (RUNNING, STOPPED, ERROR). Implement connection management and event broadcasting. Add authentication/authorization if needed.",
        "testStrategy": "Test WebSocket connection establishment, verify real-time events are emitted when agent status changes, test multiple client connections, ensure stable connection handling",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up WebSocket library and server configuration",
            "description": "Install and configure Socket.IO or ws library with the existing Express server",
            "dependencies": [],
            "details": "Install Socket.IO package, create WebSocket server instance that shares the same HTTP server as Express, configure CORS settings for WebSocket connections, and set up basic connection handling with logging",
            "status": "done",
            "testStrategy": "Test WebSocket server starts successfully, accepts connections, and handles basic connect/disconnect events"
          },
          {
            "id": 2,
            "title": "Implement connection management and authentication",
            "description": "Create connection management system with optional authentication for WebSocket clients",
            "dependencies": [
              1
            ],
            "details": "Implement connection tracking, add authentication middleware if needed (JWT token validation), create connection pools or rooms for different types of clients, handle connection cleanup on disconnect",
            "status": "done",
            "testStrategy": "Test authenticated and unauthenticated connections, verify connection tracking works correctly, test cleanup on disconnect"
          },
          {
            "id": 3,
            "title": "Define WebSocket event schema and endpoints",
            "description": "Create standardized event schema for agent status updates and define WebSocket event endpoints",
            "dependencies": [
              2
            ],
            "details": "Design event payload structure for agent status changes (agent_id, status, timestamp, metadata), define event types (agent_status_changed, agent_error, agent_metrics), create event validation schemas, implement event emitters and listeners",
            "status": "done",
            "testStrategy": "Test event schema validation, verify event payload structure matches specification, test event emission and reception"
          },
          {
            "id": 4,
            "title": "Integrate with existing agent status tracking",
            "description": "Hook WebSocket events into the current agent monitoring system to emit real-time updates",
            "dependencies": [
              3
            ],
            "details": "Identify existing agent status update points in the codebase, inject WebSocket event emissions at status change locations, ensure events are emitted for all status transitions (RUNNING, STOPPED, ERROR), add error handling for failed event emissions",
            "status": "done",
            "testStrategy": "Test that status changes trigger WebSocket events, verify all agent state transitions emit appropriate events, test event emission doesn't break existing functionality"
          },
          {
            "id": 5,
            "title": "Implement event broadcasting and client notification system",
            "description": "Create broadcasting logic to send agent status updates to appropriate WebSocket clients",
            "dependencies": [
              4
            ],
            "details": "Implement room-based or targeted broadcasting (clients can subscribe to specific agents or all agents), add event queuing for disconnected clients if needed, implement rate limiting for high-frequency updates, add logging for event broadcasting",
            "status": "done",
            "testStrategy": "Test multiple clients receive broadcasts correctly, verify targeted broadcasting works, test rate limiting prevents spam, verify event delivery to reconnected clients"
          }
        ]
      },
      {
        "id": 6,
        "title": "Create React Web Frontend Foundation",
        "description": "Setup packages/web with React application and basic responsive layout",
        "details": "Create React application using Vite or Create React App in packages/web/. Setup TypeScript configuration with project references. Create basic responsive layout with navigation header and main content area. Setup routing with React Router. Configure build process and development server. Install necessary dependencies (React, TypeScript, routing, HTTP client).",
        "testStrategy": "Verify React app builds and runs in development, TypeScript compilation works, responsive layout displays correctly on different screen sizes, routing functions properly",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize React application with Vite and TypeScript",
            "description": "Create the React application structure in packages/web/ using Vite bundler with TypeScript template",
            "dependencies": [],
            "details": "Run 'npm create vite@latest packages/web -- --template react-ts' to scaffold the application. Configure package.json with proper name, scripts, and dependencies. Setup TypeScript configuration (tsconfig.json) with project references to shared packages if they exist. Install core dependencies: React, React-DOM, TypeScript, and Vite dev dependencies.",
            "status": "done",
            "testStrategy": "Verify the development server starts successfully and renders the default React app"
          },
          {
            "id": 2,
            "title": "Configure TypeScript project references and build setup",
            "description": "Setup TypeScript configuration with project references and configure the build process",
            "dependencies": [
              1
            ],
            "details": "Update tsconfig.json to include project references to other packages in the monorepo if they exist. Configure proper module resolution, target ES2020+, and enable strict mode. Setup build scripts in package.json for both development and production. Configure Vite config for proper asset handling and environment variables.",
            "status": "done",
            "testStrategy": "Run build command and verify TypeScript compilation succeeds without errors"
          },
          {
            "id": 3,
            "title": "Install and configure React Router for navigation",
            "description": "Setup React Router for client-side routing and create basic route structure",
            "dependencies": [
              2
            ],
            "details": "Install react-router-dom and @types/react-router-dom. Create a Router component with BrowserRouter wrapper. Setup basic routes for home page and placeholder routes for future pages. Create route configuration that can be easily extended. Setup proper TypeScript types for route parameters.",
            "status": "done",
            "testStrategy": "Test navigation between routes works correctly and browser back/forward buttons function properly"
          },
          {
            "id": 4,
            "title": "Create responsive layout components with navigation header",
            "description": "Build the foundational layout components including navigation header and main content area",
            "dependencies": [
              3
            ],
            "details": "Create Layout component with responsive design using CSS modules or styled-components. Build Navigation component with header containing logo/title and navigation menu. Create MainContent component for page content with proper spacing and responsive breakpoints. Use CSS Grid or Flexbox for layout structure. Ensure mobile-first responsive design with proper breakpoints (mobile: 320px+, tablet: 768px+, desktop: 1024px+).",
            "status": "done",
            "testStrategy": "Test layout responsiveness across different screen sizes and verify navigation is accessible on mobile devices"
          },
          {
            "id": 5,
            "title": "Setup HTTP client and development environment configuration",
            "description": "Install and configure HTTP client for API calls and setup development environment",
            "dependencies": [
              4
            ],
            "details": "Install axios or fetch wrapper for HTTP requests. Create API client configuration with base URL and common headers. Setup environment variable handling for different environments (development, staging, production). Configure development server with proper proxy settings if needed for API calls. Create utility functions for common HTTP operations (GET, POST, PUT, DELETE).",
            "status": "done",
            "testStrategy": "Test HTTP client configuration with mock API calls and verify environment variables are properly loaded"
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Agent Dashboard with Real-time Status",
        "description": "Create agent list dashboard showing current agents with real-time status updates via WebSocket",
        "details": "Create AgentDashboard component displaying agent list in table/card format. Show agent ID, branch, status, creation time, and actions. Integrate WebSocket client to receive real-time status updates. Implement status indicators (RUNNING/green, STOPPED/yellow, ERROR/red). Add auto-refresh capability and connection status indicator. Style with responsive design.",
        "testStrategy": "Verify dashboard displays current agents correctly, real-time updates work when agent status changes, WebSocket connection is stable, responsive design works on mobile and desktop",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create AgentDashboard Component Structure",
            "description": "Build the basic AgentDashboard React component with table/card layout for displaying agent information",
            "dependencies": [],
            "details": "Create AgentDashboard.tsx component with responsive table structure. Include columns for agent ID, branch, status, creation time, and actions. Implement toggle between table and card views for mobile responsiveness. Add basic styling with CSS modules or styled-components. Create mock data structure for initial development.",
            "status": "done",
            "testStrategy": "Unit tests for component rendering and layout switching between table/card views"
          },
          {
            "id": 2,
            "title": "Implement Status Indicators and Styling",
            "description": "Add visual status indicators with color coding and responsive design elements",
            "dependencies": [
              1
            ],
            "details": "Create StatusIndicator component with color-coded badges (RUNNING/green, STOPPED/yellow, ERROR/red). Implement responsive CSS for mobile/desktop layouts. Add loading states and empty state handling. Include icons for different statuses using a icon library like React Icons or Lucide.",
            "status": "done",
            "testStrategy": "Visual regression tests for status indicators and responsive layout testing"
          },
          {
            "id": 3,
            "title": "Create WebSocket Client Service",
            "description": "Build WebSocket client service for real-time agent status updates",
            "dependencies": [],
            "details": "Create WebSocketService class to handle connection, message parsing, and reconnection logic. Implement event handlers for agent status updates. Add connection state management (connecting, connected, disconnected, error). Include exponential backoff for reconnection attempts and heartbeat mechanism.",
            "status": "done",
            "testStrategy": "Unit tests for WebSocket service methods and mock WebSocket server for integration testing"
          },
          {
            "id": 4,
            "title": "Integrate Real-time Updates with Component State",
            "description": "Connect WebSocket service to AgentDashboard component for live status updates",
            "dependencies": [
              1,
              3
            ],
            "details": "Integrate WebSocketService with AgentDashboard using React hooks (useEffect, useState). Implement agent data state management with real-time updates. Add connection status indicator in the UI. Handle message parsing and state updates when receiving agent status changes. Implement proper cleanup on component unmount.",
            "status": "done",
            "testStrategy": "Integration tests for WebSocket message handling and component state updates"
          },
          {
            "id": 5,
            "title": "Add Auto-refresh and Action Handlers",
            "description": "Implement auto-refresh capability and action buttons for agent management",
            "dependencies": [
              2,
              4
            ],
            "details": "Add manual refresh button and auto-refresh toggle with configurable intervals. Implement action buttons for each agent (start, stop, restart, delete). Add confirmation dialogs for destructive actions. Include error handling and user feedback for failed actions. Add keyboard shortcuts for common actions.",
            "status": "done",
            "testStrategy": "End-to-end tests for user interactions, action button functionality, and auto-refresh behavior"
          }
        ]
      },
      {
        "id": 8,
        "title": "Build Agent Creation Form with Branch Selection",
        "description": "Create web form for agent creation with branch selection and validation",
        "details": "Create AgentCreateForm component with branch input field and validation. Integrate with backend POST /api/agents endpoint. Add form validation for branch names and required fields. Implement success/error handling and user feedback. Add loading states during agent creation. Ensure form submission creates actual tmux sessions and git worktrees like CLI.",
        "testStrategy": "Test form submission creates working agents, validation prevents invalid inputs, success/error messages display correctly, created agents appear in dashboard immediately, tmux sessions are accessible",
        "priority": "medium",
        "dependencies": [
          4,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create AgentCreateForm component structure",
            "description": "Build the basic form component with input fields for agent name, branch selection, and submit button",
            "dependencies": [],
            "details": "Create AgentCreateForm.tsx component with form fields for agent name (text input), branch selection (dropdown/combobox), and submit button. Use controlled components with useState for form state management. Include proper TypeScript interfaces for form data.",
            "status": "done",
            "testStrategy": "Unit tests for component rendering and form field interactions"
          },
          {
            "id": 2,
            "title": "Implement form validation logic",
            "description": "Add client-side validation for required fields and branch name format validation",
            "dependencies": [
              1
            ],
            "details": "Implement validation rules for agent name (required, alphanumeric with hyphens/underscores) and branch name (required, valid git branch format). Add error state management and display validation messages. Use form validation library like react-hook-form or custom validation functions.",
            "status": "done",
            "testStrategy": "Unit tests for validation functions and error message display"
          },
          {
            "id": 3,
            "title": "Create API integration service",
            "description": "Build service layer to handle POST requests to /api/agents endpoint with proper error handling",
            "dependencies": [
              2
            ],
            "details": "Create agentService.ts with createAgent function that posts to /api/agents endpoint. Include proper TypeScript types for request/response. Implement error handling for network failures, validation errors, and server errors. Add request/response logging.",
            "status": "done",
            "testStrategy": "Integration tests for API service with mock server responses"
          },
          {
            "id": 4,
            "title": "Implement loading states and user feedback",
            "description": "Add loading indicators, success messages, and error handling with appropriate UI feedback",
            "dependencies": [
              3
            ],
            "details": "Add loading state during form submission with spinner/disabled button. Implement success feedback (toast notification or success message) and error handling with user-friendly error messages. Add form reset functionality after successful submission.",
            "status": "done",
            "testStrategy": "UI tests for loading states and user feedback scenarios"
          },
          {
            "id": 5,
            "title": "Integrate form with backend tmux/git worktree functionality",
            "description": "Ensure form submission triggers actual tmux session creation and git worktree setup like CLI implementation",
            "dependencies": [
              4
            ],
            "details": "Verify backend integration creates tmux sessions and git worktrees correctly. Add validation that submitted data matches expected backend format. Implement proper error handling for tmux/git operations. Add success verification that agent is actually created and running.",
            "status": "done",
            "testStrategy": "End-to-end tests verifying full agent creation workflow including tmux session and git worktree creation"
          }
        ]
      },
      {
        "id": 9,
        "title": "Add Basic Agent Management Actions",
        "description": "Implement basic agent management actions (start, stop, view details, delete) in web interface",
        "details": "Add action buttons/menus to agent dashboard for basic operations. Implement agent deletion with confirmation dialog. Add agent details modal/page showing full agent information. Integrate with backend API endpoints for each action. Add proper error handling and user feedback. Ensure actions update dashboard in real-time.",
        "testStrategy": "Test all agent actions work correctly (delete removes agent and tmux session), confirmation dialogs prevent accidental actions, error handling displays appropriate messages, real-time updates reflect changes immediately",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Agent Action Components",
            "description": "Design and implement reusable UI components for agent management actions including buttons, menus, and confirmation dialogs",
            "dependencies": [],
            "details": "Create ActionButton, ActionMenu, and ConfirmationDialog components. Style them consistently with existing UI. Include icons for start, stop, view, and delete actions. Implement proper loading states and disabled states for each action type.",
            "status": "done",
            "testStrategy": "Unit tests for component rendering and prop handling. Visual regression tests for different states."
          },
          {
            "id": 2,
            "title": "Implement Agent Details Modal",
            "description": "Create a modal component that displays comprehensive agent information including status, configuration, logs, and metadata",
            "dependencies": [
              1
            ],
            "details": "Build AgentDetailsModal component with tabs or sections for different information types. Include agent status, creation date, configuration parameters, recent activity logs, and performance metrics. Add close and edit functionality.",
            "status": "done",
            "testStrategy": "Component tests for modal behavior and data display. Integration tests with mock agent data."
          },
          {
            "id": 3,
            "title": "Integrate Backend API Endpoints",
            "description": "Connect frontend actions to backend API endpoints for start, stop, delete, and get details operations",
            "dependencies": [
              1
            ],
            "details": "Create API service methods for each agent operation. Implement proper request/response handling with TypeScript types. Add authentication headers and error response parsing. Include retry logic for failed requests.",
            "status": "done",
            "testStrategy": "Unit tests for API service methods. Mock API responses for different scenarios including success and error cases."
          },
          {
            "id": 4,
            "title": "Add Error Handling and User Feedback",
            "description": "Implement comprehensive error handling with user-friendly feedback messages and loading states for all agent actions",
            "dependencies": [
              2,
              3
            ],
            "details": "Add toast notifications or alert components for success/error messages. Implement loading spinners during API calls. Create specific error messages for different failure scenarios. Add timeout handling and network error recovery.",
            "status": "done",
            "testStrategy": "Error simulation tests for different failure modes. User experience tests for feedback visibility and timing."
          },
          {
            "id": 5,
            "title": "Implement Real-time Dashboard Updates",
            "description": "Add real-time synchronization to update the agent dashboard immediately after any management action is performed",
            "dependencies": [
              4
            ],
            "details": "Implement WebSocket connection or polling mechanism to refresh agent list after actions. Update local state optimistically for immediate feedback. Handle concurrent updates from multiple users. Add visual indicators for recently updated agents.",
            "status": "done",
            "testStrategy": "Integration tests for real-time updates. Performance tests for update frequency and resource usage."
          }
        ]
      },
      {
        "id": 10,
        "title": "Configure Build System and Cross-Package Dependencies",
        "description": "Setup workspace-aware build processes with TypeScript project references and development scripts",
        "details": "Configure TypeScript project references in root and package tsconfigs for proper cross-package imports. Setup concurrent build scripts for all packages. Create development scripts for running backend and frontend simultaneously. Configure module resolution and ensure proper dependency management. Add build validation and testing scripts for entire monorepo.",
        "testStrategy": "Verify TypeScript compilation works across all packages, development scripts start all services correctly, cross-package imports resolve properly, build process produces working artifacts for all packages",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure TypeScript Project References",
            "description": "Setup TypeScript project references in root tsconfig and all package tsconfigs to enable proper cross-package imports and incremental compilation",
            "dependencies": [],
            "details": "Create root tsconfig.json with composite project references pointing to all packages. Update each package's tsconfig.json to extend base config and set composite: true. Configure path mapping for @magents/* packages and ensure proper module resolution between packages.",
            "status": "done",
            "testStrategy": "Verify TypeScript compilation works across packages and imports resolve correctly"
          },
          {
            "id": 2,
            "title": "Setup Concurrent Build Scripts",
            "description": "Create build scripts that can compile all packages in the correct dependency order with support for parallel builds where possible",
            "dependencies": [
              1
            ],
            "details": "Add npm scripts for building all packages using tsc --build with project references. Create scripts for clean builds, incremental builds, and watch mode. Use tools like concurrently or npm-run-all for parallel execution where dependencies allow.",
            "status": "done",
            "testStrategy": "Test build scripts produce correct output for all packages and handle dependency changes"
          },
          {
            "id": 3,
            "title": "Create Development Scripts",
            "description": "Setup development scripts for running backend and frontend simultaneously with hot reload and proper environment configuration",
            "dependencies": [
              2
            ],
            "details": "Create npm scripts that start both backend server and frontend development server concurrently. Configure environment variables, proxy settings, and hot reload. Ensure proper cleanup and error handling when stopping development servers.",
            "status": "done",
            "testStrategy": "Verify development environment starts correctly and changes trigger appropriate rebuilds"
          },
          {
            "id": 4,
            "title": "Configure Module Resolution and Dependencies",
            "description": "Ensure proper module resolution for cross-package imports and validate dependency management across the monorepo",
            "dependencies": [
              1
            ],
            "details": "Configure package.json workspaces, update import paths to use @magents/* aliases, ensure all cross-package dependencies are properly declared. Setup proper exports in package.json files and validate no circular dependencies exist.",
            "status": "done",
            "testStrategy": "Test that all imports resolve correctly and packages can be consumed by other packages"
          },
          {
            "id": 5,
            "title": "Add Build Validation and Testing Scripts",
            "description": "Create comprehensive scripts for validating builds and running tests across the entire monorepo",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Add scripts for running all tests, linting all packages, type checking the entire codebase, and validating builds. Create CI-ready scripts that exit with proper error codes. Include scripts for checking package integrity and dependency consistency.",
            "status": "done",
            "testStrategy": "Verify all validation scripts catch common issues and provide clear error messages"
          }
        ]
      },
      {
        "id": 11,
        "title": "Implement Backend Project Discovery API",
        "description": "Create API endpoints for discovering and validating local git repositories, including directory browsing, git repo detection, and project metadata extraction",
        "details": "Build REST endpoints: GET /api/projects/discover (browse directories), GET /api/projects/validate (validate git repos), GET /api/projects/metadata (extract repo info). Implement secure directory browsing with path validation. Add git repository detection using isomorphic-git or child_process. Extract project metadata like branches, remotes, TaskMaster config. Include comprehensive error handling and security measures to prevent directory traversal attacks.",
        "testStrategy": "Test directory browsing works securely, git repository detection identifies valid repos, metadata extraction returns correct branch/remote info, path validation prevents security issues, API handles errors gracefully",
        "priority": "high",
        "dependencies": [
          10
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Create Frontend Directory Browser Component",
        "description": "Build React component for browsing local file system and selecting project directories from the GUI",
        "details": "Create DirectoryBrowser component with tree-view interface for navigating local directories. Implement folder expansion/collapse, file filtering (show only directories), and visual indicators for git repositories. Add search functionality for quick directory location. Include breadcrumb navigation and favorite/recent directories. Integrate with backend project discovery API. Use virtual scrolling for performance with large directory trees.",
        "testStrategy": "Test directory navigation works smoothly, git repositories are visually indicated, search functionality finds directories quickly, component handles large directory structures efficiently, integration with backend API is seamless",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Enhance Agent Creation Form with Project Selection",
        "description": "Upgrade existing agent creation form to include project selection, git branch management, and validation",
        "details": "Modify AgentCreateForm to include DirectoryBrowser integration for project selection. Add git branch selection dropdown with create-new-branch option. Implement real-time validation for project path, branch names, and agent IDs. Add project metadata display (repo name, current branch, last commit). Include form steps/wizard pattern for better UX. Add preview of what will be created before submission.",
        "testStrategy": "Test project selection updates available branches, branch validation prevents invalid names, form wizard guides users through process, preview shows accurate information, submission creates agents correctly",
        "priority": "medium",
        "dependencies": [
          8,
          12
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Implement TaskMaster Integration API",
        "description": "Create backend endpoints for TaskMaster task discovery, assignment, and environment setup for agents",
        "details": "Build API endpoints: GET /api/taskmaster/detect (check if TM configured), GET /api/taskmaster/tasks (list available tasks), GET /api/taskmaster/:taskId (get task details), POST /api/agents/:id/assign-task (assign task to agent). Implement TaskMaster CLI integration using child_process to execute task-master commands. Add automatic TaskMaster environment setup during agent creation. Include task briefing generation and context file creation.",
        "testStrategy": "Test TaskMaster detection works in configured projects, task listing returns available tasks, task assignment creates proper environment, briefing files are generated correctly, CLI integration executes commands successfully",
        "priority": "medium",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Build TaskMaster Task Browser Interface",
        "description": "Create React components for browsing, selecting, and previewing TaskMaster tasks in the GUI",
        "details": "Create TaskBrowser component with task list, search, and filtering capabilities. Implement TaskPreview component showing task details, dependencies, and requirements. Add task assignment interface with validation. Include task status indicators and progress tracking. Implement drag-and-drop task assignment to agents. Add task creation wizard for creating new tasks from GUI.",
        "testStrategy": "Test task browsing shows all available tasks, search and filtering work correctly, task preview displays complete information, assignment interface validates properly, drag-and-drop functionality works smoothly",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create TaskBrowser Component with List View",
            "description": "Build the main TaskBrowser component with a list view for displaying all TaskMaster tasks",
            "dependencies": [],
            "details": "Create TaskBrowser.tsx component that fetches and displays tasks from the TaskMaster API. Implement a list view with task cards showing ID, title, status, priority, and brief description. Add pagination or virtual scrolling for large task lists. Include loading states and error handling. Style with Tailwind CSS to match the existing UI design.",
            "status": "done",
            "testStrategy": "Unit tests for component rendering, mock API responses for task list, test pagination/scrolling behavior, verify error states display correctly"
          },
          {
            "id": 2,
            "title": "Implement Task Search and Filtering",
            "description": "Add search functionality and filters to the TaskBrowser for finding specific tasks",
            "dependencies": [
              1
            ],
            "details": "Add search input field with real-time filtering by task title, description, and ID. Implement filter controls for task status (pending, in-progress, done), priority levels, and dependency status. Add sorting options (by ID, priority, status, title). Store filter state in URL params for shareable views. Implement keyboard shortcuts for common filters.",
            "status": "done",
            "testStrategy": "Test search filters tasks correctly, verify all filter combinations work, ensure URL params persist filter state, test keyboard shortcuts functionality"
          },
          {
            "id": 3,
            "title": "Build TaskPreview Component",
            "description": "Create a detailed preview component for displaying full task information",
            "dependencies": [
              1
            ],
            "details": "Create TaskPreview.tsx component that shows complete task details including description, implementation details, test strategy, dependencies graph, subtasks tree, and metadata. Add syntax highlighting for code snippets in task descriptions. Include collapsible sections for better organization. Show task relationships and dependency chains visually.",
            "status": "done",
            "testStrategy": "Test all task fields display correctly, verify dependency visualization, test collapsible sections, ensure code highlighting works"
          },
          {
            "id": 4,
            "title": "Add Task Assignment Interface with Drag-and-Drop",
            "description": "Implement drag-and-drop functionality for assigning tasks to agents",
            "dependencies": [
              1,
              3
            ],
            "details": "Implement drag-and-drop using react-beautiful-dnd or similar library. Make task cards draggable from the browser to agent panels. Add visual feedback during drag operations (ghost image, drop zones). Validate task assignments (check dependencies, agent capabilities). Show confirmation dialog for task assignment. Update both task and agent states after successful assignment.",
            "status": "done",
            "testStrategy": "Test drag-and-drop mechanics work smoothly, verify assignment validation logic, test state updates after assignment, ensure accessibility compliance"
          },
          {
            "id": 5,
            "title": "Create Task Creation Wizard",
            "description": "Build a wizard interface for creating new TaskMaster tasks from the GUI",
            "dependencies": [
              1,
              3
            ],
            "details": "Create multi-step wizard for task creation with fields for title, description, priority, dependencies, implementation details, and test strategy. Add dependency picker with search functionality. Include task template selection for common task types. Implement form validation and preview before submission. Add ability to create subtasks within the wizard. Integrate with TaskMaster API to save new tasks.",
            "status": "done",
            "testStrategy": "Test wizard flow and navigation, verify form validation works correctly, test task creation API integration, ensure created tasks appear in browser immediately"
          }
        ]
      },
      {
        "id": 16,
        "title": "Add Advanced Agent Configuration Options",
        "description": "Implement GUI controls for Docker settings, environment variables, and advanced agent options",
        "details": "Create AdvancedConfigPanel component with Docker configuration (enable/disable, image selection, network settings). Add environment variable editor with key-value pairs. Implement port allocation settings with conflict detection. Add Claude settings customization (auto-accept, model selection). Include MCP configuration editor. Add configuration templates and presets for common setups.",
        "testStrategy": "Test Docker configuration correctly sets up containers, environment variables are properly passed to agents, port allocation prevents conflicts, Claude settings override defaults correctly, configuration templates apply settings properly",
        "priority": "low",
        "dependencies": [
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implement Project Management System",
        "description": "Create project registration, management, and agent association system for organizing work",
        "details": "Build Project entity with CRUD operations: create, read, update, delete projects. Implement project-agent relationship management. Add project dashboard showing associated agents and their status. Include project settings for default configurations. Add project templates for common project types. Implement project health monitoring and statistics.",
        "testStrategy": "Test project CRUD operations work correctly, agent associations are maintained properly, project dashboard displays accurate information, templates create properly configured projects, health monitoring shows correct metrics",
        "priority": "medium",
        "dependencies": [
          11,
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Add Agent Creation Progress Tracking",
        "description": "Implement real-time progress indicators and status updates during complex agent creation operations",
        "details": "Create ProgressTracker component with step-by-step progress display. Implement WebSocket-based real-time updates for long-running operations. Add detailed status messages for each creation step (git operations, tmux setup, configuration copying). Include error recovery and retry mechanisms. Add operation cancellation capability. Implement progress persistence across page refreshes.",
        "testStrategy": "Test progress tracking shows accurate status, real-time updates work correctly, error messages are informative, cancellation stops operations cleanly, progress persists across page refreshes",
        "priority": "medium",
        "dependencies": [
          5,
          13
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Create Agent Creation Wizard",
        "description": "Build comprehensive multi-step wizard interface for guided agent creation with validation and preview",
        "details": "Create AgentCreationWizard component with steps: 1) Project Selection, 2) Branch Management, 3) TaskMaster Integration, 4) Advanced Configuration, 5) Preview & Create. Implement step validation and navigation controls. Add form state persistence across steps. Include comprehensive preview showing all settings before creation. Add wizard templates for common use cases.",
        "testStrategy": "Test wizard navigation works smoothly, step validation prevents invalid configurations, state persistence maintains data across steps, preview shows accurate information, templates create proper configurations",
        "priority": "medium",
        "dependencies": [
          13,
          15,
          16,
          18
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement GUI Agent Creation Integration Testing",
        "description": "Create comprehensive end-to-end tests for GUI agent creation workflow covering all features and edge cases",
        "details": "Build E2E test suite using Playwright covering: project discovery and selection, git repository validation, branch creation and selection, TaskMaster task assignment, agent creation with various configurations, error handling and recovery. Include performance tests for large directory structures. Add integration tests for CLI equivalence verification. Implement automated testing of complex scenarios.",
        "testStrategy": "Test suite covers all user workflows, performance tests validate responsiveness, integration tests verify CLI compatibility, error scenarios are properly handled, complex configurations work correctly",
        "priority": "high",
        "dependencies": [
          19
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Docker Runtime Implementation",
        "description": "Create Docker-based runtime for agents with pre-built images including all necessary tools",
        "details": "Create Dockerfile for magents/agent:latest with Node.js 20, tmux, git, task-master-ai, and claude-code bridge. Implement volume mapping for project files (/workspace) and shared configuration (/shared). Add Docker health checks using HTTP endpoint. Configure auto-restart policies with restart: unless-stopped. Create two variants: magents/agent:latest (production) and magents/agent:dev (with debugging tools). Include entrypoint script for proper signal handling and graceful shutdown.",
        "testStrategy": "Build Docker image and verify all tools are installed correctly. Test volume persistence across container restarts. Verify health checks respond correctly. Test container lifecycle (start, stop, restart). Validate signal handling for graceful shutdown.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Base Dockerfile with Core Dependencies",
            "description": "Build the foundational Docker image with Node.js 20, system packages, and base tools",
            "details": "Create Dockerfile in packages/cli/docker/ directory. Use node:20-slim as base image for smaller size. Install essential system packages: git, tmux, curl, python3, make, g++ for native modules. Set up non-root user for security. Configure working directory as /workspace. Install global npm packages: npm@latest, yarn, pnpm for flexibility.",
            "testStrategy": "Build image and verify all tools are installed with correct versions. Test that git, tmux, and node commands work. Verify non-root user has proper permissions.",
            "dependencies": [],
            "status": "done"
          },
          {
            "id": 2,
            "title": "Install Task Master and Claude Code Bridge",
            "description": "Add Task Master AI and create socket-based Claude Code bridge for host communication",
            "details": "Install task-master-ai globally via npm. Create a Unix domain socket-based bridge system that allows containers to use the host's Claude Code installation. Implementation includes: 1) Create /var/run/claude-code-bridge.sock Unix domain socket on host accessible via volume mount at /host/claude-bridge.sock in containers, 2) Implement lightweight Node.js proxy service (claude-bridge-server) that listens on the socket and forwards commands to host's Claude Code CLI, 3) Create claude-code wrapper script in container that communicates through the socket instead of requiring local Claude Code installation, 4) Handle authentication tokens and session management transparently by proxying ~/.config/claude-code from host, 5) Support multiple concurrent container connections with request queuing and connection pooling, 6) Provide fallback mechanism that detects if bridge is unavailable and shows helpful error message with setup instructions. Configure Task Master to use mounted config directory. Set up environment variables for Task Master configuration including CLAUDE_BRIDGE_SOCKET=/host/claude-bridge.sock.",
            "testStrategy": "Verify task-master CLI is available and functional. Test claude-code bridge socket connection from container to host. Validate multiple containers can connect simultaneously. Test authentication token passthrough works correctly. Verify fallback error handling when bridge unavailable. Validate Task Master can read/write to mounted volumes and use Claude Code through the bridge.",
            "dependencies": [
              1
            ],
            "status": "done"
          },
          {
            "id": 3,
            "title": "Implement Volume Mapping and Persistence",
            "description": "Configure Docker volumes for project files, shared config, and agent state persistence",
            "details": "Define volume mount points: /workspace for project files, /shared for shared configuration, /agent for agent-specific state. Create docker-compose.yml template with proper volume definitions. Implement permission handling for mounted volumes. Add .dockerignore to exclude unnecessary files. Create volume initialization scripts.",
            "testStrategy": "Test file persistence across container restarts. Verify permissions allow read/write from container. Test that changes in container reflect on host. Validate .gitignore patterns work correctly.",
            "dependencies": [
              1
            ],
            "status": "done"
          },
          {
            "id": 4,
            "title": "Add Health Checks and Auto-restart Policies",
            "description": "Implement container health monitoring and automatic recovery mechanisms",
            "details": "Create health check endpoint using simple HTTP server on port 3999. Implement HEALTHCHECK instruction in Dockerfile with proper intervals. Configure restart policy as 'unless-stopped' in docker-compose. Add graceful shutdown handling for SIGTERM/SIGINT. Create health status script that checks tmux sessions and agent status.",
            "testStrategy": "Test health endpoint responds correctly. Verify container auto-restarts on failure. Test graceful shutdown preserves work. Monitor resource usage during health checks.",
            "dependencies": [
              1,
              2
            ],
            "status": "done"
          },
          {
            "id": 5,
            "title": "Create Production and Development Image Variants",
            "description": "Build optimized production image and feature-rich development image with debugging tools",
            "details": "Create multi-stage Dockerfile with shared base. Production variant: minimal size, no debugging tools, optimized for performance. Development variant: includes vim, htop, strace, tcpdump, node debugger. Use build args to control variant selection. Create GitHub Actions workflow for automated image building and publishing to Docker Hub.",
            "testStrategy": "Compare image sizes between variants. Test debugging tools work in dev image. Verify production image has no unnecessary packages. Test automated build and publish workflow.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "status": "done"
          }
        ]
      },
      {
        "id": 22,
        "title": "Task Master Integration Wrapper",
        "description": "Build transparent wrapper API to hide Task Master complexity while preserving functionality",
        "details": "Create MagentsTaskManager class with simplified methods: quickStart(), autoAnalyze(), simplifyTasks(). Implement automatic PRD generation from codebase using AST analysis. Add project type detection (package.json for Node.js, requirements.txt for Python, etc.). Create task view simplification that shows only essential information for basic users. Build caching layer to avoid redundant Task Master calls. Add error translation to convert Task Master errors to user-friendly messages.",
        "testStrategy": "Unit test wrapper methods with mocked Task Master. Integration test with real Task Master installation. Verify PRD generation produces valid output. Test project type detection with various project structures. Validate simplified task view maintains essential information.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create MagentsTaskManager core class with simplified API",
            "description": "Implement the MagentsTaskManager class with methods quickStart(), autoAnalyze(), and simplifyTasks(). This class will serve as the main interface between Magents and Task Master, providing a simplified API that abstracts Task Master's complexity while maintaining its functionality.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 2,
            "title": "Implement automatic PRD generation and project detection",
            "description": "Build functionality to automatically generate PRD from codebase using AST analysis. Implement project type detection by checking for package.json (Node.js), requirements.txt (Python), pom.xml (Java), etc. This will enable zero-config project initialization.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 3,
            "title": "Build simplified task view and user interface abstraction",
            "description": "Create task view simplification layer that shows only essential information for basic users. Implement different view modes (basic, intermediate, advanced) that progressively expose more Task Master functionality. Design clean, intuitive task presentation format.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 4,
            "title": "Implement caching layer and performance optimization",
            "description": "Build caching layer to avoid redundant Task Master calls and improve performance. Implement smart cache invalidation, task state persistence, and efficient data structures. Add metrics to track cache hit rates and API call reduction.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          },
          {
            "id": 5,
            "title": "Create error handling and user-friendly messaging system",
            "description": "Implement comprehensive error translation to convert Task Master errors to user-friendly messages. Build error recovery mechanisms, helpful suggestions for common issues, and graceful fallbacks. Add logging and debugging features for troubleshooting.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 22
          }
        ]
      },
      {
        "id": 23,
        "title": "Unified Data Model Implementation",
        "description": "Create single source of truth for agent and task data shared between CLI and GUI",
        "details": "Design flattened UnifiedAgentData schema replacing complex nested structures. Implement SQLite database for persistent storage with automatic migrations. Create DataSync service for real-time updates between CLI and GUI. Build migration tool to convert existing agent configurations. Add data validation layer with Zod schemas. Implement atomic operations to prevent race conditions. Create backup/restore functionality.",
        "testStrategy": "Schema validation tests for all data operations. Migration tests from old to new format. Concurrent access tests for race conditions. Real-time sync tests between multiple clients. Backup and restore functionality tests.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design UnifiedAgentData schema and data structures",
            "description": "Create flattened data schema replacing complex nested structures. Define TypeScript interfaces and Zod validation schemas for agent, task, and project data. Design schema for SQLite database with proper relationships and indexing.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 2,
            "title": "Implement SQLite database with migrations",
            "description": "Set up SQLite database for persistent storage. Create migration system for schema changes. Implement database initialization, connection management, and proper cleanup. Add database versioning and automatic migration handling.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 3,
            "title": "Create DataSync service for real-time updates",
            "description": "Build service for real-time synchronization between CLI and GUI. Implement WebSocket or Server-Sent Events for live updates. Handle concurrent access and conflict resolution. Add event-driven updates for data changes.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 4,
            "title": "Build migration tool for existing configurations",
            "description": "Create tool to convert existing agent configurations to new unified format. Handle data transformation from old JSON files to new SQLite schema. Implement backup and rollback capabilities for migrations. Add validation to ensure data integrity during migration.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          },
          {
            "id": 5,
            "title": "Implement atomic operations and backup/restore",
            "description": "Add atomic transaction support to prevent race conditions. Implement database backup and restore functionality. Create data validation layer with comprehensive error handling. Add rollback mechanisms for failed operations.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 23
          }
        ]
      },
      {
        "id": 24,
        "title": "Core CLI Commands Implementation",
        "description": "Implement three essential commands with progressive complexity options",
        "details": "Implement 'magents create <name>' with instant agent creation using defaults. Add 'magents assign' for automatic task generation based on project analysis. Create 'magents start' to launch agents in Docker containers. Add --mode flag supporting simple/standard/advanced modes. Implement --dry-run for preview. Add progress indicators for long operations. Create interactive mode for missing parameters.",
        "testStrategy": "CLI integration tests for all commands. Test mode switching preserves data. Verify dry-run doesn't make changes. Test progress indicators show accurate status. Validate interactive prompts work correctly.",
        "priority": "high",
        "dependencies": [
          21,
          22,
          23
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement `magents create <name>` command with instant agent creation",
            "description": "Create the core 'magents create' command that instantly creates agents using smart defaults and minimal user input",
            "dependencies": [],
            "details": "Implement the primary agent creation command that accepts a name parameter and creates an agent with intelligent defaults. Include automatic project detection, default branch selection, smart naming conventions, and minimal configuration requirements. The command should work out-of-the-box without requiring extensive setup or configuration from users.",
            "status": "done",
            "testStrategy": "Test instant creation with various project types, verify smart defaults are applied correctly, test with and without existing git repositories, validate naming conventions and conflict resolution"
          },
          {
            "id": 2,
            "title": "Add progressive complexity modes (--mode simple/standard/advanced)",
            "description": "Implement the --mode flag system that provides different levels of configuration complexity based on user expertise",
            "dependencies": [
              1
            ],
            "details": "Create a progressive disclosure system with three modes: simple (minimal options, smart defaults), standard (common configurations exposed), and advanced (full feature access). Include mode switching capabilities, data preservation across mode changes, and contextual help for each mode level. Ensure users can upgrade from simple to advanced modes without losing data.",
            "status": "done",
            "testStrategy": "Test each mode shows appropriate options, verify mode switching preserves all data, test guided upgrade suggestions, validate help content matches mode complexity"
          },
          {
            "id": 3,
            "title": "Implement `magents assign` command for automatic task generation",
            "description": "Create the 'magents assign' command that automatically generates and assigns tasks based on project analysis",
            "dependencies": [
              1
            ],
            "details": "Build the task assignment command that leverages the MagentsTaskManager wrapper to automatically analyze projects, generate relevant tasks, and assign them to agents. Include project type detection, automatic PRD generation, task prioritization, and intelligent task-to-agent matching. Integrate with TaskMaster functionality while hiding complexity from users.",
            "status": "done",
            "testStrategy": "Test automatic task generation for different project types, verify task assignment logic, test integration with TaskMaster, validate project analysis accuracy"
          },
          {
            "id": 4,
            "title": "Create `magents start` command to launch agents in Docker containers",
            "description": "Implement the container orchestration command that launches agents in Docker environments with proper resource management",
            "dependencies": [
              1
            ],
            "details": "Build the agent startup command that creates and manages Docker containers for agents. Include container lifecycle management, volume mounting, network configuration, health monitoring, and resource allocation. Integrate with the Docker runtime implementation and ensure proper container cleanup and restart policies.",
            "status": "done",
            "testStrategy": "Test container creation and startup, verify volume mounting and persistence, test health monitoring and auto-restart, validate resource allocation and limits"
          },
          {
            "id": 5,
            "title": "Add utility features (--dry-run, progress indicators, interactive mode)",
            "description": "Implement supporting utility features that enhance user experience and provide operational transparency",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "Add --dry-run functionality for previewing changes without execution, implement real-time progress indicators for long-running operations, create interactive mode for missing parameters with smart prompts and validation. Include operation cancellation, progress persistence across page refreshes, and comprehensive user feedback systems.",
            "status": "done",
            "testStrategy": "Test dry-run doesn't make changes, verify progress indicators show accurate status, test interactive prompts work correctly, validate cancellation stops operations cleanly"
          }
        ]
      },
      {
        "id": 25,
        "title": "Single-Page Dashboard Implementation",
        "description": "Redesign GUI to single-page application with progressive disclosure interface",
        "details": "Create unified dashboard with agent cards showing live status. Implement collapsible sections for advanced options. Add quick action buttons (Create, Start, Stop, Assign Tasks). Build inline terminal component using xterm.js. Implement real-time updates via Server-Sent Events. Add keyboard shortcuts for power users. Create responsive design for mobile support.",
        "testStrategy": "Component tests for all UI elements. E2E tests for user workflows. Responsive design tests on various screen sizes. Real-time update tests with simulated events. Accessibility tests for keyboard navigation.",
        "priority": "high",
        "dependencies": [
          23
        ],
        "status": "done"
      },
      {
        "id": 26,
        "title": "GUI-CLI Integration Bridge",
        "description": "Ensure complete feature parity and real-time synchronization between GUI and CLI",
        "details": "Share business logic through @magents/core package. Implement unified command execution layer. Create WebSocket/SSE bridge for real-time updates. Add command palette in GUI mapping to CLI commands. Build activity log showing all operations from both interfaces. Implement conflict resolution for concurrent operations.",
        "testStrategy": "Integration tests for CLI commands executed from GUI. Verify real-time sync with parallel CLI/GUI operations. Test conflict resolution scenarios. Validate command palette executes correctly. Check activity log captures all operations.",
        "priority": "high",
        "dependencies": [
          24,
          25
        ],
        "status": "in-progress"
      },
      {
        "id": 27,
        "title": "Auto-Configuration System",
        "description": "Implement intelligent defaults and automatic configuration detection",
        "details": "Build project type detection using file patterns and package managers. Implement automatic port allocation with conflict detection. Create secure API key storage with encryption. Add MCP server auto-discovery by scanning .mcp.json files. Build configuration inheritance (global -> project -> agent). Add smart suggestions based on project analysis.",
        "testStrategy": "Test detection accuracy across different project types. Verify port allocation avoids conflicts. Test API key encryption and retrieval. Validate MCP discovery finds all servers. Test configuration inheritance precedence.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "done"
      },
      {
        "id": 28,
        "title": "Progressive Complexity Modes",
        "description": "Implement three-tier complexity system for different user expertise levels",
        "details": "Create Simple mode with only essential options (name, project path). Build Standard mode with common configurations exposed. Implement Advanced mode with full Task Master and MCP access. Add mode switching without data loss. Create guided upgrade path from simple to advanced. Build contextual help for each mode level.",
        "testStrategy": "Test each mode shows appropriate options. Verify mode switching preserves all data. Test guided upgrade suggestions appear correctly. Validate help content matches mode complexity. Test feature discovery in each mode.",
        "priority": "medium",
        "dependencies": [
          24,
          25
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Simple Mode UI and Configuration",
            "description": "Create the Simple mode interface with only essential options (agent name and project path). Build the minimal UI components and state management for this mode.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 28
          },
          {
            "id": 2,
            "title": "Build Standard Mode with Common Configurations",
            "description": "Implement Standard mode interface that exposes commonly used configuration options while hiding advanced complexity. Include project settings, basic Docker options, and environment variables.",
            "details": "",
            "status": "done",
            "dependencies": [
              "28.1"
            ],
            "parentTaskId": 28
          },
          {
            "id": 3,
            "title": "Implement Advanced Mode with Full Feature Access",
            "description": "Create Advanced mode that provides complete access to Task Master integration, MCP configuration, Docker settings, and all other power-user features with comprehensive customization options.",
            "details": "",
            "status": "done",
            "dependencies": [
              "28.2"
            ],
            "parentTaskId": 28
          },
          {
            "id": 4,
            "title": "Add Mode Switching and Data Persistence",
            "description": "Implement seamless mode switching functionality that preserves user data and configurations. Create migration paths between modes without losing settings or requiring re-configuration.",
            "details": "",
            "status": "done",
            "dependencies": [
              "28.3"
            ],
            "parentTaskId": 28
          },
          {
            "id": 5,
            "title": "Create Contextual Help and Guided Upgrade System",
            "description": "Build contextual help system that adapts to each mode level. Implement guided upgrade paths that suggest when users might benefit from more advanced features, with step-by-step tutorials and feature discovery mechanisms.",
            "details": "",
            "status": "done",
            "dependencies": [
              "28.4"
            ],
            "parentTaskId": 28
          }
        ]
      },
      {
        "id": 29,
        "title": "Error Message Enhancement",
        "description": "Replace technical error messages with user-friendly, actionable guidance",
        "details": "Create error mapping system for common failures. Add actionable suggestions for each error type. Implement error recovery workflows. Add 'Learn More' links to documentation. Create error reporting mechanism. Build automatic error resolution for common issues. Add progress context to long-running operations.",
        "testStrategy": "Test error scenarios produce friendly messages. Verify suggestions are actionable and correct. Test error recovery flows work properly. Validate documentation links are valid. Test automatic resolution succeeds when possible.",
        "priority": "medium",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 30,
        "title": "Cloud Deployment Support",
        "description": "Enable deployment and management of agents in cloud environments",
        "details": "Implement 'magents deploy --cloud' command with provider selection. Add state persistence using cloud storage. Create secure tunnel for remote agent access. Build cloud-specific Docker images with smaller footprint. Add support for AWS ECS, Google Cloud Run, and Azure Container Instances. Implement cost estimation before deployment.",
        "testStrategy": "Test deployment to each cloud provider. Verify state persistence and restoration. Test remote access security and performance. Validate cost estimates match actual usage. Test container scaling and resource limits.",
        "priority": "low",
        "dependencies": [
          21,
          24
        ],
        "status": "pending"
      },
      {
        "id": 31,
        "title": "Setup Electron project foundation",
        "description": "Initialize Electron app structure with main/renderer process architecture and integrate existing React codebase",
        "status": "in-progress",
        "dependencies": [],
        "priority": "high",
        "details": "1. Install Electron and essential dependencies (electron, electron-builder, electron-updater)\n2. Create main process entry point (main.js) with BrowserWindow configuration\n3. Setup preload script for secure context bridging\n4. Configure webpack/vite for Electron renderer process\n5. Integrate existing React app as renderer\n6. Setup IPC communication patterns\n7. Configure development environment with hot reload\n8. Add electron-devtools-installer for React DevTools",
        "testStrategy": "Verify app launches, React components render, DevTools available, hot reload works, IPC communication functional",
        "subtasks": [
          {
            "id": "31.1",
            "title": "Install Electron dependencies and setup package structure",
            "description": "Install core Electron packages and configure workspace for Electron app",
            "dependencies": [],
            "details": "1. Add Electron dependencies to packages/electron/package.json\n2. Install electron, electron-builder, electron-updater\n3. Add electron-devtools-installer for development\n4. Configure main and renderer entry points in package.json\n5. Setup electron-specific scripts (dev, build, dist)",
            "status": "pending",
            "testStrategy": "Verify all packages install correctly, check package.json scripts work",
            "parentTaskId": 31
          },
          {
            "id": "31.2",
            "title": "Create main process architecture with BrowserWindow",
            "description": "Implement Electron main process with proper window management and security",
            "dependencies": [
              "31.1"
            ],
            "details": "1. Create packages/electron/src/main/index.ts\n2. Implement createWindow function with security best practices\n3. Configure BrowserWindow with webPreferences\n4. Handle app lifecycle events (ready, window-all-closed, activate)\n5. Setup proper window sizing and centering",
            "status": "pending",
            "testStrategy": "Test app launches, window appears correctly, lifecycle events work",
            "parentTaskId": 31
          },
          {
            "id": "31.3",
            "title": "Setup preload script and context bridge",
            "description": "Create secure bridge between main and renderer processes",
            "dependencies": [
              "31.2"
            ],
            "details": "1. Create packages/electron/src/preload/index.ts\n2. Use contextBridge.exposeInMainWorld for secure API\n3. Define IPC channels for agent management\n4. Implement type-safe IPC communication\n5. Add validation for all IPC messages",
            "status": "pending",
            "testStrategy": "Verify preload script loads, test IPC communication works securely",
            "parentTaskId": 31
          },
          {
            "id": "31.4",
            "title": "Configure build system for Electron with React",
            "description": "Setup webpack/vite configuration for Electron renderer with React",
            "dependencies": [
              "31.1"
            ],
            "details": "1. Create electron-specific vite config\n2. Configure proper externals for Electron\n3. Setup hot module replacement for development\n4. Configure production build optimizations\n5. Ensure proper source maps for debugging",
            "status": "pending",
            "testStrategy": "Test dev server works with HMR, production build completes successfully",
            "parentTaskId": 31
          },
          {
            "id": "31.5",
            "title": "Integrate existing React app as renderer",
            "description": "Connect the web UI to run inside Electron renderer process",
            "dependencies": [
              "31.3",
              "31.4"
            ],
            "details": "1. Update packages/web entry point for Electron\n2. Modify API calls to use IPC instead of HTTP\n3. Create ElectronProvider for React context\n4. Update routing for file:// protocol\n5. Ensure all assets load correctly in Electron",
            "status": "pending",
            "testStrategy": "Verify React app renders in Electron, test navigation works, check API calls",
            "parentTaskId": 31
          }
        ]
      },
      {
        "id": 32,
        "title": "Implement macOS native window controls and styling",
        "description": "Add native macOS traffic light controls, vibrancy effects, and system-integrated window management",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "high",
        "details": "1. Configure frameless window with traffic light buttons\n2. Implement custom title bar with draggable region\n3. Add vibrancy effect to sidebar using BrowserWindow options\n4. Setup window state management (size, position persistence)\n5. Implement full-screen mode support\n6. Add window snapping and multiple workspace support\n7. Configure rounded corners and shadows\n8. Implement SF Pro font stack",
        "testStrategy": "Test on macOS for native feel, verify window controls work, check vibrancy effects, ensure state persistence across restarts",
        "subtasks": [
          {
            "id": "32.1",
            "title": "Implement frameless window with traffic lights",
            "description": "Create custom title bar with native macOS controls",
            "dependencies": [],
            "details": "1. Set frame: false in BrowserWindow options\n2. Configure titleBarStyle: 'hiddenInset' for macOS\n3. Add transparent window background\n4. Position traffic lights correctly\n5. Handle window dragging regions",
            "status": "pending",
            "testStrategy": "Test on macOS, verify traffic lights appear and function correctly",
            "parentTaskId": 32
          },
          {
            "id": "32.2",
            "title": "Add vibrancy effects to sidebar",
            "description": "Implement native macOS vibrancy for visual depth",
            "dependencies": [
              "32.1"
            ],
            "details": "1. Set vibrancy: 'sidebar' in BrowserWindow\n2. Make sidebar background transparent\n3. Adjust text contrast for readability\n4. Test different vibrancy modes\n5. Add fallback for non-macOS",
            "status": "pending",
            "testStrategy": "Verify vibrancy effect visible on macOS, test readability",
            "parentTaskId": 32
          },
          {
            "id": "32.3",
            "title": "Implement window state management",
            "description": "Persist and restore window size and position",
            "dependencies": [],
            "details": "1. Use electron-window-state package\n2. Save window bounds on resize/move\n3. Restore position on app launch\n4. Handle multi-monitor scenarios\n5. Respect system window constraints",
            "status": "pending",
            "testStrategy": "Test window position persists across restarts, verify multi-monitor support",
            "parentTaskId": 32
          },
          {
            "id": "32.4",
            "title": "Add full-screen and workspace support",
            "description": "Implement native full-screen mode and Mission Control integration",
            "dependencies": [
              "32.1"
            ],
            "details": "1. Enable native full-screen support\n2. Handle full-screen transitions\n3. Update UI for full-screen mode\n4. Support Mission Control gestures\n5. Add keyboard shortcuts for full-screen",
            "status": "pending",
            "testStrategy": "Test full-screen toggle, verify Mission Control integration works",
            "parentTaskId": 32
          },
          {
            "id": "32.5",
            "title": "Configure rounded corners and shadows",
            "description": "Apply native macOS window styling with proper shadows",
            "dependencies": [
              "32.1"
            ],
            "details": "1. Set proper window background color\n2. Configure shadow properties\n3. Apply 12px border radius to window\n4. Ensure content doesn't overflow corners\n5. Test visual appearance on all macOS versions",
            "status": "pending",
            "testStrategy": "Visual inspection of window appearance, verify shadows render correctly",
            "parentTaskId": 32
          }
        ]
      },
      {
        "id": 33,
        "title": "Update UI with new color palette and design system",
        "description": "Apply new dark theme color palette with improved visual hierarchy and macOS design language",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "high",
        "details": "1. Create CSS variables for new color palette (#1A1B1E backgrounds, #339AF0 primary, etc.)\n2. Update all component styles to use new colors\n3. Implement elevation system with subtle shadows\n4. Add 8px/12px border radius system\n5. Update typography with proper text color hierarchy\n6. Create themed scrollbar styles\n7. Implement hover/active states with new colors\n8. Add transition animations for smooth interactions",
        "testStrategy": "Visual regression testing, verify all components use new palette, check contrast ratios, test dark/light mode switching",
        "subtasks": [
          {
            "id": "33.1",
            "title": "Create CSS variables for new color system",
            "description": "Implement comprehensive color palette with CSS custom properties",
            "dependencies": [],
            "details": "1. Define root CSS variables for all colors\n2. Create semantic color mappings\n3. Add elevation/shadow variables\n4. Define spacing and radius tokens\n5. Ensure proper CSS cascade",
            "status": "pending",
            "testStrategy": "Verify all CSS variables defined, test color inheritance works",
            "parentTaskId": 33
          },
          {
            "id": "33.2",
            "title": "Update component styles with new palette",
            "description": "Apply new colors to all React components systematically",
            "dependencies": [
              "33.1"
            ],
            "details": "1. Update Layout components first\n2. Modify Card and Panel backgrounds\n3. Update button and form styles\n4. Adjust text and icon colors\n5. Update status indicators colors",
            "status": "pending",
            "testStrategy": "Visual regression testing, check all components use new colors",
            "parentTaskId": 33
          },
          {
            "id": "33.3",
            "title": "Implement elevation and shadow system",
            "description": "Create consistent depth hierarchy with shadows",
            "dependencies": [
              "33.1"
            ],
            "details": "1. Define 5 elevation levels\n2. Create shadow utilities\n3. Apply shadows to cards and modals\n4. Add hover elevation changes\n5. Ensure performance with shadows",
            "status": "pending",
            "testStrategy": "Verify shadow rendering, test performance impact",
            "parentTaskId": 33
          },
          {
            "id": "33.4",
            "title": "Update typography and text hierarchy",
            "description": "Implement SF Pro font stack with proper text colors",
            "dependencies": [
              "33.1"
            ],
            "details": "1. Configure SF Pro font family\n2. Define font size scale\n3. Set line heights and weights\n4. Apply text color hierarchy\n5. Add responsive typography",
            "status": "pending",
            "testStrategy": "Check font rendering on macOS, verify text hierarchy clear",
            "parentTaskId": 33
          },
          {
            "id": "33.5",
            "title": "Add transitions and hover states",
            "description": "Implement smooth animations with new color palette",
            "dependencies": [
              "33.2"
            ],
            "details": "1. Add transition utilities\n2. Create hover color variations\n3. Implement focus states\n4. Add loading animations\n5. Ensure 60fps performance",
            "status": "pending",
            "testStrategy": "Test all interactive elements have smooth transitions",
            "parentTaskId": 33
          }
        ]
      },
      {
        "id": 34,
        "title": "Create native menu bar and application menu",
        "description": "Implement full native menu bar with standard macOS menu structure and keyboard shortcuts",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "high",
        "details": "1. Create Menu template with standard structure (App, File, Edit, View, Window, Help)\n2. Add application menu items (About, Preferences, Quit)\n3. Implement File menu (New Agent, Open Project, Recent Projects)\n4. Add Edit menu with standard shortcuts\n5. Create View menu with zoom controls and view modes\n6. Implement Window menu with multi-window support\n7. Add keyboard accelerators (Cmd+N, Cmd+O, etc.)\n8. Handle menu state updates based on app context",
        "testStrategy": "Test all menu items trigger correct actions, verify keyboard shortcuts work, check menu state management",
        "subtasks": [
          {
            "id": "34.1",
            "title": "Create application menu template",
            "description": "Build standard macOS menu structure with all sections",
            "dependencies": [],
            "details": "1. Create menu template structure\n2. Add App menu with About, Preferences\n3. Implement File menu items\n4. Add Edit menu with clipboard ops\n5. Create View and Window menus",
            "status": "pending",
            "testStrategy": "Verify menu appears correctly, all sections present",
            "parentTaskId": 34
          },
          {
            "id": "34.2",
            "title": "Implement menu actions and handlers",
            "description": "Connect menu items to application functionality",
            "dependencies": [
              "34.1"
            ],
            "details": "1. Create IPC handlers for menu actions\n2. Implement New Agent functionality\n3. Add Open Project dialog\n4. Create Preferences window\n5. Handle About dialog",
            "status": "pending",
            "testStrategy": "Test each menu item triggers correct action",
            "parentTaskId": 34
          },
          {
            "id": "34.3",
            "title": "Add keyboard shortcuts and accelerators",
            "description": "Configure standard macOS keyboard shortcuts",
            "dependencies": [
              "34.1"
            ],
            "details": "1. Add Cmd+N for New Agent\n2. Configure Cmd+O for Open\n3. Set up standard Edit shortcuts\n4. Add View shortcuts (zoom, etc)\n5. Implement custom shortcuts",
            "status": "pending",
            "testStrategy": "Test all keyboard shortcuts work correctly",
            "parentTaskId": 34
          },
          {
            "id": "34.4",
            "title": "Implement Recent Projects menu",
            "description": "Track and display recently opened projects",
            "dependencies": [
              "34.2"
            ],
            "details": "1. Store recent projects list\n2. Update menu dynamically\n3. Handle project opening\n4. Clear recent items option\n5. Persist across sessions",
            "status": "pending",
            "testStrategy": "Verify recent items appear and open correctly",
            "parentTaskId": 34
          },
          {
            "id": "34.5",
            "title": "Add contextual menu updates",
            "description": "Update menu state based on app context",
            "dependencies": [
              "34.2"
            ],
            "details": "1. Enable/disable items based on state\n2. Update checkmarks for view modes\n3. Show/hide items conditionally\n4. Handle multi-window menus\n5. Sync with app state",
            "status": "pending",
            "testStrategy": "Test menu items update based on app state",
            "parentTaskId": 34
          }
        ]
      },
      {
        "id": 35,
        "title": "Implement bottom status bar with quick actions",
        "description": "Add fixed bottom status bar with quick action buttons, metrics display, and system resource monitoring",
        "status": "pending",
        "dependencies": [
          31,
          33
        ],
        "priority": "medium",
        "details": "1. Create 32px fixed bottom bar component\n2. Add quick action buttons (New Agent, Start/Stop All, View Toggle)\n3. Implement connection status indicator with real-time updates\n4. Add system resource monitor (CPU, Memory usage)\n5. Create notification center button with badge\n6. Display keyboard shortcut hints on hover\n7. Add collapsible sections for extended info\n8. Implement smooth animations for state changes",
        "testStrategy": "Verify all buttons functional, test real-time updates, check resource monitoring accuracy, test responsive behavior",
        "subtasks": [
          {
            "id": "35.1",
            "title": "Create StatusBar React component",
            "description": "Build fixed bottom bar with proper styling",
            "dependencies": [],
            "details": "1. Create StatusBar component\n2. Set 32px fixed height\n3. Apply new color scheme\n4. Add flex layout for sections\n5. Ensure proper z-index",
            "status": "pending",
            "testStrategy": "Verify status bar renders at bottom, stays fixed on scroll",
            "parentTaskId": 35
          },
          {
            "id": "35.2",
            "title": "Implement quick action buttons",
            "description": "Add interactive buttons for common actions",
            "dependencies": [
              "35.1"
            ],
            "details": "1. Create New Agent button\n2. Add Start/Stop All toggle\n3. Implement View Mode switcher\n4. Style with hover effects\n5. Add keyboard shortcuts hints",
            "status": "pending",
            "testStrategy": "Test all buttons clickable and trigger actions",
            "parentTaskId": 35
          },
          {
            "id": "35.3",
            "title": "Add connection status indicator",
            "description": "Show real-time connection status with animations",
            "dependencies": [
              "35.1"
            ],
            "details": "1. Create status indicator component\n2. Connect to WebSocket state\n3. Add pulse animation for active\n4. Show error states clearly\n5. Add reconnection info",
            "status": "pending",
            "testStrategy": "Verify status updates in real-time",
            "parentTaskId": 35
          },
          {
            "id": "35.4",
            "title": "Implement resource monitoring",
            "description": "Display system CPU and memory usage",
            "dependencies": [
              "35.1"
            ],
            "details": "1. Add IPC channel for system stats\n2. Create usage display components\n3. Update every 2 seconds\n4. Show as percentages/graphs\n5. Add threshold warnings",
            "status": "pending",
            "testStrategy": "Test resource data updates correctly",
            "parentTaskId": 35
          },
          {
            "id": "35.5",
            "title": "Create notification center button",
            "description": "Add notification badge and dropdown",
            "dependencies": [
              "35.1"
            ],
            "details": "1. Create notification button\n2. Add badge for count\n3. Implement dropdown panel\n4. Store notification history\n5. Add clear all option",
            "status": "pending",
            "testStrategy": "Verify notifications appear with badge count",
            "parentTaskId": 35
          }
        ]
      },
      {
        "id": 36,
        "title": "Enhance terminal integration with native performance",
        "description": "Upgrade terminal component for native performance with split panes, tabs, and enhanced features",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "high",
        "details": "1. Replace web terminal with node-pty for native performance\n2. Implement terminal tab management\n3. Add split pane support (horizontal/vertical)\n4. Create terminal themes with new color palette\n5. Add font preference settings\n6. Implement better copy/paste with system clipboard\n7. Add search functionality within terminal\n8. Create picture-in-picture mode for terminals",
        "testStrategy": "Performance benchmarks, test split panes, verify copy/paste works across platforms, test PiP mode",
        "subtasks": [
          {
            "id": "36.1",
            "title": "Replace xterm.js with node-pty",
            "description": "Integrate native PTY for better performance",
            "dependencies": [],
            "details": "1. Add node-pty to Electron main\n2. Create PTY management service\n3. Handle PTY lifecycle\n4. Stream data to renderer\n5. Manage multiple PTY instances",
            "status": "pending",
            "testStrategy": "Test terminal launches with native performance",
            "parentTaskId": 36
          },
          {
            "id": "36.2",
            "title": "Implement terminal tab management",
            "description": "Add tabbed interface for multiple terminals",
            "dependencies": [
              "36.1"
            ],
            "details": "1. Create tab bar component\n2. Handle tab creation/deletion\n3. Implement tab reordering\n4. Add tab context menu\n5. Persist tab state",
            "status": "pending",
            "testStrategy": "Verify tabs can be created, switched, and closed",
            "parentTaskId": 36
          },
          {
            "id": "36.3",
            "title": "Add split pane functionality",
            "description": "Enable horizontal and vertical terminal splits",
            "dependencies": [
              "36.1"
            ],
            "details": "1. Implement split pane logic\n2. Add split controls\n3. Handle resize dragging\n4. Manage focus between panes\n5. Add keyboard navigation",
            "status": "pending",
            "testStrategy": "Test splitting works in both directions",
            "parentTaskId": 36
          },
          {
            "id": "36.4",
            "title": "Create terminal theming system",
            "description": "Implement customizable terminal colors",
            "dependencies": [
              "36.1"
            ],
            "details": "1. Define terminal color schemes\n2. Apply new dark palette\n3. Add theme picker UI\n4. Store theme preferences\n5. Support custom themes",
            "status": "pending",
            "testStrategy": "Verify themes apply correctly",
            "parentTaskId": 36
          },
          {
            "id": "36.5",
            "title": "Implement picture-in-picture mode",
            "description": "Allow terminals to float in separate windows",
            "dependencies": [
              "36.1"
            ],
            "details": "1. Create PiP window management\n2. Handle window creation\n3. Sync terminal state\n4. Add window controls\n5. Manage PiP lifecycle",
            "status": "pending",
            "testStrategy": "Test PiP windows open and sync correctly",
            "parentTaskId": 36
          }
        ]
      },
      {
        "id": 37,
        "title": "Add system integration and notifications",
        "description": "Implement native notifications, system tray, dock integration, and file system features",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "medium",
        "details": "1. Setup native notifications API with custom templates\n2. Create system tray icon with context menu\n3. Implement dock badge for agent counts\n4. Add drag & drop file support\n5. Create native file dialogs for project selection\n6. Implement Recent Documents menu\n7. Add Touch Bar support for macOS\n8. Setup file associations for .magents files",
        "testStrategy": "Test notifications appear correctly, verify system tray works, check file operations, test Touch Bar on supported Macs",
        "subtasks": [
          {
            "id": "37.1",
            "title": "Setup native notifications API",
            "description": "Implement system notifications with Electron",
            "dependencies": [],
            "details": "1. Create notification service\n2. Request notification permissions\n3. Design notification templates\n4. Handle notification clicks\n5. Add notification queue",
            "status": "pending",
            "testStrategy": "Test notifications appear in system tray",
            "parentTaskId": 37
          },
          {
            "id": "37.2",
            "title": "Create system tray integration",
            "description": "Add persistent system tray icon with menu",
            "dependencies": [],
            "details": "1. Create tray icon assets\n2. Build tray menu template\n3. Show agent status in tray\n4. Add quick actions menu\n5. Handle tray clicks",
            "status": "pending",
            "testStrategy": "Verify tray icon appears with working menu",
            "parentTaskId": 37
          },
          {
            "id": "37.3",
            "title": "Implement dock badge for macOS",
            "description": "Show agent count badge on dock icon",
            "dependencies": [],
            "details": "1. Track active agent count\n2. Update dock badge number\n3. Add bounce animation for alerts\n4. Handle dock menu\n5. Clear badge on focus",
            "status": "pending",
            "testStrategy": "Test badge updates with agent count",
            "parentTaskId": 37
          },
          {
            "id": "37.4",
            "title": "Add drag and drop file support",
            "description": "Enable dragging files into the application",
            "dependencies": [],
            "details": "1. Setup drop zones\n2. Handle file drag events\n3. Process dropped files\n4. Show drop indicators\n5. Validate file types",
            "status": "pending",
            "testStrategy": "Test dragging files into app works",
            "parentTaskId": 37
          },
          {
            "id": "37.5",
            "title": "Configure Touch Bar for macOS",
            "description": "Add Touch Bar controls for compatible Macs",
            "dependencies": [],
            "details": "1. Create Touch Bar template\n2. Add agent controls\n3. Show status indicators\n4. Handle Touch Bar actions\n5. Update dynamically",
            "status": "pending",
            "testStrategy": "Test on Touch Bar equipped Mac",
            "parentTaskId": 37
          }
        ]
      },
      {
        "id": 38,
        "title": "Implement auto-updater and distribution pipeline",
        "description": "Setup auto-update system with delta updates and create distribution packages for all platforms",
        "status": "pending",
        "dependencies": [
          31
        ],
        "priority": "medium",
        "details": "1. Configure electron-updater with update server\n2. Implement update UI with progress indication\n3. Setup code signing for macOS (Developer ID)\n4. Configure notarization workflow\n5. Create DMG installer with custom background\n6. Setup MSI installer for Windows\n7. Create AppImage for Linux\n8. Configure GitHub Actions for multi-platform builds",
        "testStrategy": "Test update flow end-to-end, verify signatures, test installers on each platform, check auto-update works",
        "subtasks": [
          {
            "id": "38.1",
            "title": "Configure electron-updater",
            "description": "Setup auto-update infrastructure",
            "dependencies": [],
            "details": "1. Configure update server URL\n2. Setup electron-updater\n3. Create update config\n4. Handle update events\n5. Add rollback support",
            "status": "pending",
            "testStrategy": "Test update check and download process",
            "parentTaskId": 38
          },
          {
            "id": "38.2",
            "title": "Create update UI components",
            "description": "Build user interface for update process",
            "dependencies": [
              "38.1"
            ],
            "details": "1. Create update dialog\n2. Add progress bar\n3. Show release notes\n4. Handle user choices\n5. Add force update option",
            "status": "pending",
            "testStrategy": "Verify update UI appears and functions",
            "parentTaskId": 38
          },
          {
            "id": "38.3",
            "title": "Setup code signing for macOS",
            "description": "Configure Developer ID signing",
            "dependencies": [],
            "details": "1. Obtain signing certificates\n2. Configure electron-builder\n3. Setup keychain access\n4. Test signing process\n5. Verify with codesign",
            "status": "pending",
            "testStrategy": "Verify app is properly signed",
            "parentTaskId": 38
          },
          {
            "id": "38.4",
            "title": "Create platform installers",
            "description": "Build DMG, MSI, and AppImage",
            "dependencies": [
              "38.3"
            ],
            "details": "1. Configure DMG with background\n2. Setup MSI with installer UI\n3. Create AppImage config\n4. Add installer icons\n5. Test installations",
            "status": "pending",
            "testStrategy": "Test installers on each platform",
            "parentTaskId": 38
          },
          {
            "id": "38.5",
            "title": "Setup GitHub Actions CI/CD",
            "description": "Automate build and release process",
            "dependencies": [
              "38.4"
            ],
            "details": "1. Create workflow files\n2. Setup build matrix\n3. Configure artifact uploads\n4. Add release creation\n5. Setup signing secrets",
            "status": "pending",
            "testStrategy": "Verify CI builds complete successfully",
            "parentTaskId": 38
          }
        ]
      },
      {
        "id": 39,
        "title": "Add performance optimizations and monitoring",
        "description": "Optimize app performance with lazy loading, virtual scrolling, and implement performance monitoring",
        "status": "pending",
        "dependencies": [
          31,
          33,
          36
        ],
        "priority": "medium",
        "details": "1. Implement React.lazy for code splitting\n2. Add virtual scrolling for agent lists\n3. Setup memory usage monitoring\n4. Implement background process optimization\n5. Add GPU acceleration flags\n6. Create performance profiling tools\n7. Optimize IPC message passing\n8. Add startup time tracking",
        "testStrategy": "Measure startup time < 2s, verify memory < 200MB idle, test 60fps animations, profile performance bottlenecks",
        "subtasks": [
          {
            "id": "39.1",
            "title": "Implement React.lazy code splitting",
            "description": "Split code bundles for faster loading",
            "dependencies": [],
            "details": "1. Identify split points\n2. Wrap routes in lazy()\n3. Add loading states\n4. Configure webpack chunks\n5. Analyze bundle sizes",
            "status": "pending",
            "testStrategy": "Measure initial bundle size reduction",
            "parentTaskId": 39
          },
          {
            "id": "39.2",
            "title": "Add virtual scrolling for lists",
            "description": "Optimize rendering of large agent lists",
            "dependencies": [],
            "details": "1. Integrate react-window\n2. Convert agent list\n3. Implement dynamic heights\n4. Add scroll restoration\n5. Handle list updates",
            "status": "pending",
            "testStrategy": "Test with 1000+ agents, verify smooth scrolling",
            "parentTaskId": 39
          },
          {
            "id": "39.3",
            "title": "Setup performance monitoring",
            "description": "Track app performance metrics",
            "dependencies": [],
            "details": "1. Add performance marks\n2. Track startup time\n3. Monitor memory usage\n4. Log frame rates\n5. Create perf dashboard",
            "status": "pending",
            "testStrategy": "Verify metrics are collected accurately",
            "parentTaskId": 39
          },
          {
            "id": "39.4",
            "title": "Optimize IPC communication",
            "description": "Reduce overhead in process communication",
            "dependencies": [],
            "details": "1. Batch IPC messages\n2. Use binary protocols\n3. Add message compression\n4. Implement caching\n5. Profile IPC usage",
            "status": "pending",
            "testStrategy": "Measure IPC latency improvements",
            "parentTaskId": 39
          },
          {
            "id": "39.5",
            "title": "Configure GPU acceleration",
            "description": "Enable hardware acceleration for rendering",
            "dependencies": [],
            "details": "1. Enable GPU rasterization\n2. Configure WebGL settings\n3. Test GPU compatibility\n4. Add fallback options\n5. Monitor GPU usage",
            "status": "pending",
            "testStrategy": "Verify smooth 60fps animations",
            "parentTaskId": 39
          }
        ]
      },
      {
        "id": 40,
        "title": "Complete accessibility and testing infrastructure",
        "description": "Ensure full accessibility compliance and setup comprehensive testing suite for Electron app",
        "status": "pending",
        "dependencies": [
          31,
          32,
          33,
          34,
          35
        ],
        "priority": "medium",
        "details": "1. Add ARIA labels to all interactive elements\n2. Implement keyboard navigation for all features\n3. Add screen reader announcements\n4. Create high contrast mode\n5. Setup Spectron/Playwright for E2E testing\n6. Add unit tests for main process\n7. Create integration tests for IPC\n8. Setup automated accessibility testing",
        "testStrategy": "Run accessibility audit, test with screen readers, verify keyboard navigation complete, ensure all tests pass",
        "subtasks": [
          {
            "id": "40.1",
            "title": "Add comprehensive ARIA labels",
            "description": "Ensure all UI elements are accessible",
            "dependencies": [],
            "details": "1. Audit all components\n2. Add missing ARIA labels\n3. Set proper roles\n4. Configure live regions\n5. Test with screen reader",
            "status": "pending",
            "testStrategy": "Pass automated accessibility audit",
            "parentTaskId": 40
          },
          {
            "id": "40.2",
            "title": "Implement keyboard navigation",
            "description": "Enable full keyboard control",
            "dependencies": [],
            "details": "1. Add focus management\n2. Implement tab order\n3. Create keyboard shortcuts\n4. Add skip links\n5. Handle modal focus",
            "status": "pending",
            "testStrategy": "Navigate entire app with keyboard only",
            "parentTaskId": 40
          },
          {
            "id": "40.3",
            "title": "Create high contrast mode",
            "description": "Add accessibility color theme",
            "dependencies": [],
            "details": "1. Design high contrast palette\n2. Create theme switcher\n3. Increase text contrast\n4. Add focus indicators\n5. Test with users",
            "status": "pending",
            "testStrategy": "Verify WCAG AA compliance",
            "parentTaskId": 40
          },
          {
            "id": "40.4",
            "title": "Setup E2E testing with Playwright",
            "description": "Configure end-to-end testing for Electron",
            "dependencies": [],
            "details": "1. Install Playwright Electron\n2. Create test helpers\n3. Write app launch tests\n4. Add user flow tests\n5. Setup CI integration",
            "status": "pending",
            "testStrategy": "All E2E tests pass locally and in CI",
            "parentTaskId": 40
          },
          {
            "id": "40.5",
            "title": "Add unit tests for main process",
            "description": "Test Electron main process code",
            "dependencies": [],
            "details": "1. Setup Jest for main\n2. Mock Electron APIs\n3. Test IPC handlers\n4. Test window management\n5. Achieve 80% coverage",
            "status": "pending",
            "testStrategy": "Unit tests pass with good coverage",
            "parentTaskId": 40
          }
        ]
      },
      {
        "id": 41,
        "title": "Create Database Migration Infrastructure",
        "description": "Set up migration scripts and tools to migrate existing JSON files to SQLite database",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Create JsonToSqliteMigration class in packages/shared/src/database/migrations/. Implement methods to read existing JSON files (projects.json, agent configs), convert to unified format, and insert into SQLite database. Add rollback functionality and backup creation. Create CLI command 'magents migrate' with --rollback option.",
        "testStrategy": "Unit tests for migration logic, integration tests with sample JSON data, manual testing of rollback functionality",
        "subtasks": [
          {
            "id": 1,
            "title": "Create migration class structure and interfaces",
            "description": "Set up the base JsonToSqliteMigration class with proper interfaces and error handling",
            "dependencies": [],
            "details": "Create JsonToSqliteMigration class in packages/shared/src/database/migrations/migrate-json-to-sqlite.ts. Define interfaces for migration results, configuration options. Set up constructor with dependency injection for database service, project service, and config service.",
            "status": "done",
            "testStrategy": "Unit tests for class instantiation and interface compliance"
          },
          {
            "id": 2,
            "title": "Implement project migration logic",
            "description": "Create method to read and migrate projects from JSON to SQLite",
            "dependencies": [
              1
            ],
            "details": "Implement migrateProjects() method to read projects.json from ~/.magents/projects/, convert to UnifiedProjectData format, handle missing fields with defaults, and insert into database using ProjectRepository.",
            "status": "done",
            "testStrategy": "Integration tests with sample projects.json files"
          },
          {
            "id": 3,
            "title": "Implement agent migration logic",
            "description": "Create method to read and migrate agents from individual JSON files to SQLite",
            "dependencies": [
              1
            ],
            "details": "Implement migrateAgents() method to scan agents directory, read each agent JSON file, convert to UnifiedAgentData format, auto-assign projects for orphaned agents, and insert into database using AgentRepository.",
            "status": "done",
            "testStrategy": "Integration tests with various agent configurations"
          },
          {
            "id": 4,
            "title": "Add backup and rollback functionality",
            "description": "Implement backup creation before migration and rollback capability",
            "dependencies": [
              2,
              3
            ],
            "details": "Create backup copies of all JSON files with .backup extension before migration. Implement rollback() method to restore from backups and remove SQLite database. Add transaction support for atomic migrations.",
            "status": "done",
            "testStrategy": "Test backup creation, rollback scenarios, and data integrity"
          },
          {
            "id": 5,
            "title": "Create CLI migrate command",
            "description": "Add 'magents migrate' command to CLI with options and progress feedback",
            "dependencies": [
              4
            ],
            "details": "Create migrate.ts command file, add --rollback flag support, implement progress indicators and confirmation prompts, integrate with main CLI program, add proper error handling and user feedback.",
            "status": "done",
            "testStrategy": "CLI integration tests, user interaction tests"
          }
        ]
      },
      {
        "id": 42,
        "title": "Update Backend Services for Database",
        "description": "Modify backend services to use database repositories instead of file operations",
        "status": "done",
        "dependencies": [
          41
        ],
        "priority": "high",
        "details": "Update ProjectService to use ProjectRepository, modify agent management to use AgentRepository. Maintain backward compatibility with existing API contracts. Add transaction support for complex operations like creating agent with project.",
        "testStrategy": "Unit tests for repository integration, API integration tests, regression tests for existing functionality",
        "subtasks": [
          {
            "id": 1,
            "title": "Update ProjectService to use repositories",
            "description": "Refactor ProjectService to use ProjectRepository instead of file operations",
            "dependencies": [],
            "details": "Modify all methods in ProjectService to use database repositories. Replace fs.readJson/writeJson with repository.create/update/find methods. Maintain same public API to ensure backward compatibility.",
            "status": "done",
            "testStrategy": "Unit tests for each service method, regression tests"
          },
          {
            "id": 2,
            "title": "Update agent management services",
            "description": "Refactor agent-related services to use AgentRepository",
            "dependencies": [],
            "details": "Update DockerAgentManager and related services to use AgentRepository for persistence. Replace file-based agent storage with database operations. Ensure status updates are persisted to database.",
            "status": "done",
            "testStrategy": "Integration tests for agent lifecycle operations"
          },
          {
            "id": 3,
            "title": "Implement transaction support",
            "description": "Add database transaction support for complex operations",
            "dependencies": [
              1,
              2
            ],
            "details": "Wrap complex operations like creating agent with project in database transactions. Implement rollback on failure. Use UnifiedDatabaseService.transaction() method for atomic operations.",
            "status": "done",
            "testStrategy": "Test transaction rollback scenarios, concurrent operations"
          },
          {
            "id": 4,
            "title": "Update API controllers",
            "description": "Modify API controllers to use updated services with repositories",
            "dependencies": [
              1,
              2
            ],
            "details": "Update all API endpoints in backend controllers to use the refactored services. Ensure proper error handling and response formats remain unchanged.",
            "status": "done",
            "testStrategy": "API integration tests, endpoint response validation"
          },
          {
            "id": 5,
            "title": "Add database connection management",
            "description": "Implement proper database connection lifecycle in backend",
            "dependencies": [
              3,
              4
            ],
            "details": "Add database connection initialization in backend startup, implement connection pooling if needed, add graceful shutdown to close database connections properly.",
            "status": "done",
            "testStrategy": "Connection lifecycle tests, load testing"
          }
        ]
      },
      {
        "id": 43,
        "title": "Add Database Initialization to Startup",
        "description": "Initialize SQLite database on application startup with automatic migration",
        "status": "done",
        "dependencies": [
          41,
          42
        ],
        "priority": "high",
        "details": "Add database initialization in backend startup sequence. Create database file at ~/.magents/magents.db if not exists. Run pending migrations automatically. Add health checks for database connectivity.",
        "testStrategy": "Startup tests with fresh installation, migration tests with existing data, health check endpoint tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Add database initialization to backend startup",
            "description": "Initialize database when backend server starts",
            "dependencies": [],
            "details": "Add database initialization code to backend/src/index.ts startup sequence. Create database file at ~/.magents/magents.db if not exists. Handle initialization errors gracefully.",
            "status": "done",
            "testStrategy": "Startup tests with missing database, corrupted database"
          },
          {
            "id": 2,
            "title": "Implement automatic migration runner",
            "description": "Run pending migrations automatically on startup",
            "dependencies": [
              1
            ],
            "details": "Check current database version against latest migration version. Run any pending migrations in order. Log migration progress and handle failures appropriately.",
            "status": "done",
            "testStrategy": "Test with various migration states, version mismatches"
          },
          {
            "id": 3,
            "title": "Add database health check endpoint",
            "description": "Create health check endpoint for database connectivity",
            "dependencies": [
              1
            ],
            "details": "Add GET /api/health/database endpoint that checks database connectivity, returns current version and migration status, includes basic statistics like table counts.",
            "status": "done",
            "testStrategy": "Health check endpoint tests, failure scenarios"
          },
          {
            "id": 4,
            "title": "Add CLI database initialization",
            "description": "Ensure database is initialized for CLI operations",
            "dependencies": [
              1
            ],
            "details": "Add lazy database initialization for CLI commands that need it. Only initialize when database operations are required. Share initialization logic with backend.",
            "status": "done",
            "testStrategy": "CLI command tests with fresh installation"
          },
          {
            "id": 5,
            "title": "Create database configuration options",
            "description": "Add configuration for database path and options",
            "dependencies": [
              1,
              4
            ],
            "details": "Add database configuration to magents config (custom path, read-only mode, etc.). Support environment variables for database configuration. Document configuration options.",
            "status": "done",
            "testStrategy": "Configuration tests with various options"
          }
        ]
      },
      {
        "id": 44,
        "title": "Make ProjectId Mandatory for Agents",
        "description": "Update agent data model and creation flow to require project association",
        "status": "done",
        "dependencies": [
          42
        ],
        "priority": "high",
        "details": "Update UnifiedAgentData schema to make projectId required field. Add validation in agent creation endpoints. Update database schema with foreign key constraints. Modify CLI and API to enforce project association.",
        "testStrategy": "Schema validation tests, API tests for agent creation without projectId, foreign key constraint tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Update UnifiedAgentData schema",
            "description": "Make projectId a required field in agent data model",
            "dependencies": [],
            "details": "Modify UnifiedAgentData interface and Zod schema to make projectId required. Remove optional modifier from projectId field. Update all TypeScript types that depend on this.",
            "status": "done",
            "testStrategy": "Type checking tests, schema validation tests"
          },
          {
            "id": 2,
            "title": "Add database foreign key constraints",
            "description": "Create foreign key relationship between agents and projects",
            "dependencies": [
              1
            ],
            "details": "Add migration to create foreign key constraint on agents.projectId referencing projects.id. Set up cascade rules for updates and restrict deletes. Add appropriate indexes.",
            "status": "done",
            "testStrategy": "Constraint violation tests, cascade behavior tests"
          },
          {
            "id": 3,
            "title": "Update agent creation validation",
            "description": "Add validation to ensure projectId is provided when creating agents",
            "dependencies": [
              1
            ],
            "details": "Update agent creation endpoints to validate projectId presence. Return clear error messages when projectId is missing. Check that referenced project exists.",
            "status": "done",
            "testStrategy": "API validation tests, error message tests"
          },
          {
            "id": 4,
            "title": "Update CLI agent creation",
            "description": "Modify CLI create command to handle project requirement",
            "dependencies": [
              3
            ],
            "details": "Update magents create command to check for projectId. Implement logic to auto-create project if not provided (task 45). Show clear messages about project association.",
            "status": "done",
            "testStrategy": "CLI integration tests with various scenarios"
          },
          {
            "id": 5,
            "title": "Update existing data migration",
            "description": "Handle existing agents without projects in migration",
            "dependencies": [
              2,
              3
            ],
            "details": "In migration script, handle agents that don't have projectId. Either assign to existing project based on path matching or create new project. Log decisions made during migration.",
            "status": "done",
            "testStrategy": "Migration tests with legacy agent data"
          }
        ]
      },
      {
        "id": 45,
        "title": "Auto-Create Projects for Terminal Agents",
        "description": "Automatically create projects when agents are created from terminal without explicit project",
        "status": "in-progress",
        "dependencies": [
          44
        ],
        "priority": "medium",
        "details": "In DockerAgentManager.createAgent, check if projectId is provided. If not, create project using current working directory as path and basename as name. Link Docker volumes to project path. Update agent with auto-created projectId.",
        "testStrategy": "Integration tests for CLI agent creation, tests for project auto-creation logic, Docker volume mapping tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Add project detection logic",
            "description": "Detect when agent is created without explicit project",
            "dependencies": [],
            "details": "In DockerAgentManager.createAgent, check if projectId is provided in options. If not, flag for auto-creation. Get current working directory for project path.",
            "status": "pending",
            "testStrategy": "Unit tests for detection logic"
          },
          {
            "id": 2,
            "title": "Implement project auto-creation",
            "description": "Create project based on current directory when not specified",
            "dependencies": [
              1
            ],
            "details": "Use process.cwd() as project path. Use path.basename() for project name. Generate unique project ID. Set appropriate defaults for project settings.",
            "status": "pending",
            "testStrategy": "Project creation tests with various directory names"
          },
          {
            "id": 3,
            "title": "Link Docker volumes to project",
            "description": "Ensure Docker volumes are created from project path",
            "dependencies": [
              2
            ],
            "details": "Update Docker volume mounting to use project path as base. Ensure agent worktree is within project directory. Update volume permissions appropriately.",
            "status": "pending",
            "testStrategy": "Docker volume mounting tests"
          },
          {
            "id": 4,
            "title": "Update agent with project association",
            "description": "Associate newly created agent with auto-created project",
            "dependencies": [
              2,
              3
            ],
            "details": "After project creation, update agent record with projectId. Update project's agentIds array to include new agent. Ensure bidirectional relationship is maintained.",
            "status": "pending",
            "testStrategy": "Relationship integrity tests"
          },
          {
            "id": 5,
            "title": "Add user feedback for auto-creation",
            "description": "Provide clear feedback when project is auto-created",
            "dependencies": [
              4
            ],
            "details": "Show message indicating project was auto-created. Display project name and path. Suggest using explicit project for better organization. Log auto-creation for debugging.",
            "status": "pending",
            "testStrategy": "User interaction tests, message clarity tests"
          }
        ]
      },
      {
        "id": 46,
        "title": "Add Project Selector to Task Browser",
        "description": "Create UI component for selecting project in task browser interface",
        "status": "done",
        "dependencies": [
          43
        ],
        "priority": "medium",
        "details": "Create dropdown component in TaskBrowser.tsx to select active project. Load projects list from API. Store selected project in component state. Update task loading to use selected project path.",
        "testStrategy": "Component unit tests, integration tests for project switching, UI tests for dropdown functionality",
        "subtasks": [
          {
            "id": 1,
            "title": "Create project selector component",
            "description": "Build dropdown component for project selection",
            "dependencies": [],
            "details": "Create ProjectSelector.tsx component with dropdown UI. Use existing UI library components for consistency. Include search/filter functionality for many projects.",
            "status": "done",
            "testStrategy": "Component rendering tests, interaction tests"
          },
          {
            "id": 2,
            "title": "Integrate project API calls",
            "description": "Connect selector to backend project API",
            "dependencies": [
              1
            ],
            "details": "Add API call to fetch projects list on component mount. Handle loading and error states. Cache project list to avoid repeated calls. Set up proper TypeScript types.",
            "status": "done",
            "testStrategy": "API integration tests, error handling tests"
          },
          {
            "id": 3,
            "title": "Add state management for selection",
            "description": "Manage selected project state in TaskBrowser",
            "dependencies": [
              1,
              2
            ],
            "details": "Add selectedProjectId state to TaskBrowser component. Update state when project is selected. Persist selection in localStorage for user convenience.",
            "status": "done",
            "testStrategy": "State management tests, persistence tests"
          },
          {
            "id": 4,
            "title": "Update task loading with project filter",
            "description": "Modify task fetching to use selected project",
            "dependencies": [
              3
            ],
            "details": "Pass selectedProjectId to task loading API calls. Update taskMasterIntegrationService.getTasks to accept project parameter. Handle case when no project is selected.",
            "status": "done",
            "testStrategy": "Task filtering tests, API parameter tests"
          },
          {
            "id": 5,
            "title": "Add UI polish and feedback",
            "description": "Enhance UX with loading states and clear feedback",
            "dependencies": [
              4
            ],
            "details": "Show loading spinner while switching projects. Display current project name prominently. Add empty states for projects without tasks. Include project task count in selector.",
            "status": "done",
            "testStrategy": "UI/UX tests, visual regression tests"
          }
        ]
      },
      {
        "id": 47,
        "title": "Implement Project-Based Task Filtering",
        "description": "Filter tasks based on selected project and restrict assignment to same-project agents",
        "status": "done",
        "dependencies": [
          46
        ],
        "priority": "medium",
        "details": "Modify taskMasterIntegrationService.getTasks to accept and use project path parameter. Load tasks only from selected project's .taskmaster/tasks/tasks.json. Filter agent list when assigning tasks to show only same-project agents.",
        "testStrategy": "API tests for filtered task loading, assignment validation tests, multi-project integration tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Update task service API",
            "description": "Modify task loading service to accept project path parameter",
            "dependencies": [],
            "details": "Update taskMasterIntegrationService.getTasks signature to accept projectPath. Modify implementation to read from project-specific .taskmaster/tasks/tasks.json. Handle missing task files gracefully.",
            "status": "done",
            "testStrategy": "Service unit tests with various project paths"
          },
          {
            "id": 2,
            "title": "Implement task caching per project",
            "description": "Cache tasks by project to improve performance",
            "dependencies": [
              1
            ],
            "details": "Create task cache keyed by project ID. Invalidate cache on task updates. Implement cache expiration strategy. Consider using React Query or similar for cache management.",
            "status": "done",
            "testStrategy": "Cache behavior tests, performance tests"
          },
          {
            "id": 3,
            "title": "Filter agents by project for assignment",
            "description": "Show only same-project agents when assigning tasks",
            "dependencies": [],
            "details": "When displaying agent list for task assignment, filter by projectId. Modify agent selection UI to only show eligible agents. Add clear messaging about project restrictions.",
            "status": "done",
            "testStrategy": "Agent filtering tests, UI interaction tests"
          },
          {
            "id": 4,
            "title": "Add assignment validation",
            "description": "Validate task assignment to ensure same project",
            "dependencies": [
              3
            ],
            "details": "Add backend validation to prevent cross-project task assignment. Return clear error messages for invalid assignments. Update API documentation with constraints.",
            "status": "done",
            "testStrategy": "Validation tests, error response tests"
          },
          {
            "id": 5,
            "title": "Update task UI with project context",
            "description": "Show project information in task displays",
            "dependencies": [
              1,
              3
            ],
            "details": "Display project name in task cards. Show agent's project in assignment UI. Add visual indicators for project boundaries. Include project in task detail views.",
            "status": "done",
            "testStrategy": "UI rendering tests, visual consistency tests"
          }
        ]
      },
      {
        "id": 48,
        "title": "Create Task Integration Interface",
        "description": "Design pluggable task system architecture with common interface",
        "status": "in-progress",
        "dependencies": [],
        "priority": "medium",
        "details": "Create TaskIntegration interface in packages/shared/src/integrations/ with methods: getTasks, createTask, updateTask, deleteTask, getTaskDetails. Design for multiple implementations (Task Master, internal, none).",
        "testStrategy": "Interface design tests, mock implementation tests, type safety tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Define TaskIntegration interface",
            "description": "Create the core interface for task system integrations",
            "dependencies": [],
            "details": "Create TaskIntegration.ts in packages/shared/src/integrations/. Define methods: getTasks, getTask, createTask, updateTask, deleteTask, assignTask. Use generic types for flexibility.",
            "status": "pending",
            "testStrategy": "TypeScript compilation tests, interface usage tests"
          },
          {
            "id": 2,
            "title": "Create integration factory pattern",
            "description": "Implement factory for creating task integrations",
            "dependencies": [
              1
            ],
            "details": "Create TaskIntegrationFactory class to instantiate correct implementation. Support registration of new integrations. Configure based on settings.",
            "status": "pending",
            "testStrategy": "Factory pattern tests, registration tests"
          },
          {
            "id": 3,
            "title": "Define task data models",
            "description": "Create common task data structures",
            "dependencies": [
              1
            ],
            "details": "Define Task, TaskStatus, TaskPriority interfaces. Ensure compatibility with existing Task Master structure. Add fields for internal task system needs.",
            "status": "pending",
            "testStrategy": "Data model tests, serialization tests"
          },
          {
            "id": 4,
            "title": "Create mock implementation",
            "description": "Build mock task integration for testing",
            "dependencies": [
              1,
              3
            ],
            "details": "Create MockTaskIntegration implementing the interface. Use in-memory storage for testing. Helpful for development without external dependencies.",
            "status": "pending",
            "testStrategy": "Mock implementation behavior tests"
          },
          {
            "id": 5,
            "title": "Add integration configuration",
            "description": "Design configuration structure for integrations",
            "dependencies": [
              2
            ],
            "details": "Define configuration schema for task integrations. Support integration-specific settings. Add to main magents configuration structure.",
            "status": "pending",
            "testStrategy": "Configuration loading tests, validation tests"
          }
        ]
      },
      {
        "id": 49,
        "title": "Decouple Task Master as Optional Integration",
        "description": "Move Task Master code to integration layer and make it optional",
        "status": "pending",
        "dependencies": [
          48
        ],
        "priority": "medium",
        "details": "Create TaskMasterIntegration implementing TaskIntegration interface. Move existing Task Master code to packages/shared/src/integrations/taskmaster/. Update Dockerfile to conditionally install Task Master. Add configuration for enabling/disabling Task Master.",
        "testStrategy": "Integration tests with Task Master enabled/disabled, Docker build tests, configuration tests",
        "subtasks": [
          {
            "id": 1,
            "title": "Create TaskMasterIntegration class",
            "description": "Implement TaskIntegration interface for Task Master",
            "dependencies": [],
            "details": "Create TaskMasterIntegration.ts implementing TaskIntegration interface. Wrap existing Task Master CLI calls. Handle Task Master not being installed gracefully.",
            "status": "pending",
            "testStrategy": "Integration tests with Task Master CLI"
          },
          {
            "id": 2,
            "title": "Move Task Master code to integration layer",
            "description": "Relocate Task Master specific code",
            "dependencies": [
              1
            ],
            "details": "Move taskMasterIntegrationService to packages/shared/src/integrations/taskmaster/. Update all imports throughout codebase. Maintain backward compatibility.",
            "status": "pending",
            "testStrategy": "Import resolution tests, functionality tests"
          },
          {
            "id": 3,
            "title": "Update Dockerfile for conditional installation",
            "description": "Make Task Master installation optional in Docker",
            "dependencies": [],
            "details": "Add INSTALL_TASKMASTER build arg to Dockerfile. Conditionally run npm install -g task-master-ai. Document build options in README.",
            "status": "pending",
            "testStrategy": "Docker build tests with/without Task Master"
          },
          {
            "id": 4,
            "title": "Add feature toggle configuration",
            "description": "Create configuration to enable/disable Task Master",
            "dependencies": [
              2
            ],
            "details": "Add taskIntegration.type config option. Support values: 'taskmaster', 'internal', 'none'. Update mode configurations to reflect choice.",
            "status": "pending",
            "testStrategy": "Configuration switching tests"
          },
          {
            "id": 5,
            "title": "Update UI for optional Task Master",
            "description": "Modify UI to handle Task Master being optional",
            "dependencies": [
              4
            ],
            "details": "Conditionally show Task Master UI elements. Add messages when Task Master is disabled. Provide UI to switch task integrations.",
            "status": "pending",
            "testStrategy": "UI conditional rendering tests"
          }
        ]
      },
      {
        "id": 50,
        "title": "Implement Internal Task System",
        "description": "Create basic internal task management system using SQLite",
        "status": "pending",
        "dependencies": [
          48,
          43
        ],
        "priority": "low",
        "details": "Create InternalTaskIntegration using SQLite database. Implement CRUD operations for tasks table. Design simple schema: id, title, description, status, projectId, assignedAgentId. No external dependencies.",
        "testStrategy": "CRUD operation tests, database integration tests, API tests for internal task system",
        "subtasks": [
          {
            "id": 1,
            "title": "Create internal task database schema",
            "description": "Design and implement task table schema",
            "dependencies": [],
            "details": "Add tasks table to database migrations. Include fields: id, title, description, status, priority, projectId, assignedAgentId, dependencies, createdAt, updatedAt.",
            "status": "pending",
            "testStrategy": "Schema creation tests, migration tests"
          },
          {
            "id": 2,
            "title": "Implement TaskRepository",
            "description": "Create repository class for task data access",
            "dependencies": [
              1
            ],
            "details": "Create TaskRepository extending BaseRepository. Implement CRUD operations. Add methods for filtering by project and agent.",
            "status": "pending",
            "testStrategy": "Repository CRUD tests, query tests"
          },
          {
            "id": 3,
            "title": "Create InternalTaskIntegration class",
            "description": "Implement TaskIntegration interface for internal system",
            "dependencies": [
              2
            ],
            "details": "Create InternalTaskIntegration.ts implementing TaskIntegration. Use TaskRepository for data operations. Map between interface and database formats.",
            "status": "pending",
            "testStrategy": "Integration implementation tests"
          },
          {
            "id": 4,
            "title": "Add task API endpoints",
            "description": "Create REST API for internal task operations",
            "dependencies": [
              3
            ],
            "details": "Add CRUD endpoints for tasks when using internal integration. Reuse existing task controller structure. Ensure API compatibility.",
            "status": "pending",
            "testStrategy": "API endpoint tests, compatibility tests"
          },
          {
            "id": 5,
            "title": "Create task import/export functionality",
            "description": "Allow importing from Task Master to internal system",
            "dependencies": [
              3,
              4
            ],
            "details": "Add import command to read Task Master tasks.json. Convert and insert into internal task system. Add export to Task Master format for compatibility.",
            "status": "pending",
            "testStrategy": "Import/export tests, format conversion tests"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-30T14:18:19.843Z",
      "updated": "2025-07-03T16:55:37.866Z",
      "description": "Tasks for master context"
    }
  }
}